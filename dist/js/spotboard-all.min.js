/*! Spotboard 0.7.0 | https://github.com/spotboard/ */
/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window);

                        /* Spotboard metadata (AUTO-GENERATED) */
                        var __meta__ = {};
                        __meta__.__version__ = "0.7.0";
                    
define("metadata", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.__meta__;
    };
}(this)));

define('spotboard',[
    'jquery',
    'metadata'
],
function(jQuery, __meta__) {

    // The common namespace: 'Spotboard'
    var Spotboard = {};
    window['Spotboard'] = Spotboard;

    // inject metadata
    Spotboard.__version__ = __meta__.__version__;
    if(console) console.log("Spotboard " + Spotboard.__version__);


    /* config 로드
    *
    * config.initial_run
    * config.award_mode
    */
    Spotboard.config = window.config;
    (function(config) {
        var wls = window.location.search.substr(1);
        var rm;

        rm = /r=(\d+)/.exec(wls);
        if(rm) config['initial_runid'] = parseInt(rm[1]);

        rm = /time=(\d+)/.exec(wls);
        if(rm) config['initial_time'] = parseInt(rm[1]);
        if(rm) {
            // time= 파라메터가 있으면 자동재생 안함
            config['auto_play'] = false;
        }

        rm = /award=(true|false)/.exec(wls);
        if(rm) config['award_mode'] = (rm[1] == 'true');

        rm = /award_rank_begin=(\d+)/.exec(wls);
        if(rm) config['award_rank_begin'] = parseInt(rm[1]);

        rm = /animation=(true|false)/.exec(wls);
        if(rm) config['animation'] = (rm[1] == 'true');

        rm = /q=([-*+% \w]+)/.exec(wls);
        if(rm) config['search_query'] = '^' + decodeURIComponent(rm[1]) + '$';

        rm = /t=(\d+)/.exec(wls);
        if(rm) config['team_to_follow'] = parseInt(rm[1]);

    })(Spotboard.config);

    /* 템플릿 지원 */
    Spotboard.JST = window['JST'] = window['JST'] || {};

    /* browser detection and feature detection */
    Spotboard.browser = {};
    Spotboard.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());

    return Spotboard;
});

(function() {
  var $, AbstractRunFeedingStrategy, AssertionError, Contest, DataLoadError, FIFORunFeedingStrategy, IllegalArgumentError, M, NotImplementedError, Problem, ProblemSummary, Run, RunFeeder, Team, TeamProblemSeparatedQueuedRunFeedingStrategy, TeamProblemStatus, TeamStatus, assert, assertNotNull, deepClone, getObjectClassName, isNaN, shallowClone, stableSort,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = this.$ || require('jquery');

  if (typeof window === 'undefined') {
    $.extend = require('extend');
  }

  AssertionError = (function(_super) {
    __extends(AssertionError, _super);

    function AssertionError(message, cause) {
      this.message = message;
      this.cause = cause;
      Error.captureStackTrace(this, this);
    }

    return AssertionError;

  })(Error);

  IllegalArgumentError = (function(_super) {
    __extends(IllegalArgumentError, _super);

    function IllegalArgumentError(message, cause) {
      this.message = message;
      this.cause = cause;
      Error.captureStackTrace(this, this);
    }

    return IllegalArgumentError;

  })(Error);

  NotImplementedError = (function(_super) {
    __extends(NotImplementedError, _super);

    function NotImplementedError(message, cause) {
      this.message = message;
      this.cause = cause;
      Error.captureStackTrace(this, this);
    }

    return NotImplementedError;

  })(Error);

  DataLoadError = (function(_super) {
    __extends(DataLoadError, _super);

    function DataLoadError(message, cause) {
      this.message = message;
      this.cause = cause;
      Error.captureStackTrace(this, this);
    }

    return DataLoadError;

  })(Error);

  assert = function(expr, message) {
    if (message == null) {
      message = "Assertion Failed";
    }
    if (!expr) {
      throw new AssertionError(message);
    }
  };

  assertNotNull = function(expr, message) {
    if (message == null) {
      message = "Missing Argument";
    }
    if (!expr) {
      throw new IllegalArgumentError(message);
    }
    return expr;
  };

  getObjectClassName = function(obj) {
    if (obj === null) {
      return null;
    }
    if ((typeof obj) !== "object") {
      return null;
    }
    return /(\w+)\(/.exec(obj.constructor.toString())[1];
  };

  deepClone = function(obj) {
    return $.extend(true, {}, {
      ref: obj
    }).ref;
  };

  shallowClone = function(obj) {
    return $.extend({}, {
      ref: obj
    }).ref;
  };

  isNaN = function(x) {
    return x !== x;
  };

  stableSort = function(arr, comparator) {
    var idx, item;
    for (idx in arr) {
      item = arr[idx];
      item.__stable__idx__ = idx;
    }
    arr.sort(function(x, y) {
      var v;
      v = comparator(x, y);
      if (v === 0) {
        return x.__stable__idx__ - y.__stable__idx__;
      } else {
        return v;
      }
    });
    for (item in arr) {
      delete item.__stable__idx__;
    }
    return arr;
  };

  Problem = (function() {
    function Problem(contest, id, name, title, color) {
      this.contest = contest;
      this.id = id;
      this.name = name;
      this.title = title;
      this.color = color;
      if (!this.name) {
        this.name = this.title.charAt(0);
      }
    }

    Problem.prototype.getContest = function() {
      return this.contest;
    };

    Problem.prototype.getId = function() {
      return this.id;
    };

    Problem.prototype.getName = function() {
      return this.name;
    };

    Problem.prototype.getTitle = function() {
      return this.title;
    };

    Problem.prototype.getColor = function() {
      return this.color;
    };

    Problem.prototype.toString = function() {
      var s;
      s = "Problem " + this.name;
      if (this.title && this.title !== this.name) {
        s += " : " + this.title;
      }
      return s;
    };

    return Problem;

  })();

  Team = (function() {
    function Team(contest, id, name, group) {
      var ex, regx, _ref;
      this.contest = contest;
      this.id = id;
      this.name = name;
      this.group = group != null ? group : null;
      if (!(group != null)) {
        regx = /^([^(]+)\(([^)]*)\)$/.exec(this.name);
        try {
          if (regx) {
            _ref = [regx[1].trim(), regx[2].trim()], this.name = _ref[0], this.group = _ref[1];
          }
        } catch (_error) {
          ex = _error;
          this.group = null;
        }
      }
    }

    Team.prototype.getContest = function() {
      return this.contest;
    };

    Team.prototype.getId = function() {
      return this.id;
    };

    Team.prototype.getName = function() {
      return this.name;
    };

    Team.prototype.getGroup = function(nullAsEmpty) {
      if (nullAsEmpty == null) {
        nullAsEmpty = false;
      }
      if (nullAsEmpty && this.group === null) {
        return "";
      }
      return this.group;
    };

    return Team;

  })();

  TeamStatus = (function() {
    function TeamStatus(contest, team) {
      this.contest = contest;
      this.team = team;
      this.solved = 0;
      this.penalty = 0;
      this.lastSolvedTime = 0;
      this.rank = 1;
      this.problemStatuses = {};
      this.cache = {};
    }

    TeamStatus.prototype.getContest = function() {
      return this.contest;
    };

    TeamStatus.prototype.getTeam = function() {
      return this.team;
    };

    TeamStatus.prototype.getRank = function() {
      return this.rank;
    };

    TeamStatus.prototype.getProblemStatus = function(problem) {
      var problemStatus;
      problem = this.contest.getProblem(problem);
      problemStatus = this.problemStatuses[problem.getId()];
      if (problemStatus == null) {
        problemStatus = this.problemStatuses[problem.getId()] = new TeamProblemStatus(this.contest, this, problem);
      }
      return problemStatus;
    };

    TeamStatus.prototype.getTotalAttempts = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.totalAttempts) != null ? _ref : this.cache.totalAttempts = (function() {
        var pid, ps, s, _ref1;
        s = 0;
        _ref1 = _this.problemStatus;
        for (pid in _ref1) {
          ps = _ref1[pid];
          s += ps.getAttempts();
        }
        return s;
      })();
    };

    TeamStatus.prototype.getTotalSolved = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.totalSolved) != null ? _ref : this.cache.totalSolved = (function() {
        var pid, ps, s, _ref1;
        s = 0;
        _ref1 = _this.problemStatuses;
        for (pid in _ref1) {
          ps = _ref1[pid];
          if (ps.isAccepted()) {
            s++;
          }
        }
        return s;
      })();
    };

    TeamStatus.prototype.getPenalty = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.penalty) != null ? _ref : this.cache.penalty = (function() {
        var pid, ps, s, _ref1;
        s = 0;
        _ref1 = _this.problemStatuses;
        for (pid in _ref1) {
          ps = _ref1[pid];
          s += ps.getContributingPenalty();
        }
        return s;
      })();
    };

    TeamStatus.prototype.getLastSolvedTime = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.lastSolvedTime) != null ? _ref : this.cache.lastSolvedTime = (function() {
        var pid, ps, s, t, _ref1;
        s = 0;
        _ref1 = _this.problemStatuses;
        for (pid in _ref1) {
          ps = _ref1[pid];
          t = ps.getSolvedTime();
          if ((t != null) && t > s) {
            s = t;
          }
        }
        return s;
      })();
    };

    TeamStatus.prototype.hasSolved = function(problem) {
      problem = this.contest.getProblem(problem);
      throw new NotImplementedError;
    };

    TeamStatus.prototype.update = function(run) {
      var ps;
      assert(run.getTeam() === this.getTeam(), 'invalid run update');
      ps = this.getProblemStatus(run.getProblem());
      ps.update(run);
      return this.cache = {};
    };

    return TeamStatus;

  })();

  TeamProblemStatus = (function() {
    function TeamProblemStatus(contest, teamStatus, problem) {
      this.contest = contest;
      this.teamStatus = teamStatus;
      this.problem = problem;
      this.runs = [];
      this.netruns = null;
      this.cache = {};
    }

    TeamProblemStatus.prototype.getAllRuns = function() {
      return this.runs;
    };

    TeamProblemStatus.prototype.getContest = function() {
      return this.contest;
    };

    TeamProblemStatus.prototype.getTeamStatus = function() {
      return this.teamStatus;
    };

    TeamProblemStatus.prototype.getProblem = function() {
      return this.problem;
    };

    TeamProblemStatus.prototype.isAttempted = function() {
      return this.runs.length > 0;
    };

    TeamProblemStatus.prototype.getNetRuns = function() {
      var _ref,
        _this = this;
      return (_ref = this.netruns) != null ? _ref : this.netruns = (function() {
        var netr, run, _i, _len, _ref1;
        netr = [];
        _ref1 = _this.runs;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          run = _ref1[_i];
          netr.push(run);
          if (run.isJudgedYes()) {
            break;
          }
        }
        return netr;
      })();
    };

    TeamProblemStatus.prototype.getNetLastRun = function() {
      var netr;
      netr = this.getNetRuns();
      if (netr.length === 0) {
        return null;
      }
      return netr[netr.length - 1];
    };

    TeamProblemStatus.prototype.getAttempts = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.attempts) != null ? _ref : this.cache.attempts = (function() {
        return _this.getNetRuns().length;
      })();
    };

    TeamProblemStatus.prototype.getNotAcceptedAttempts = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.notacceptedAttempts) != null ? _ref : this.cache.notacceptedAttempts = (function() {
        var attempts;
        attempts = _this.getNetRuns().length;
        if (_this.isAccepted()) {
          attempts -= 1;
        }
        return attempts;
      })();
    };

    TeamProblemStatus.prototype.getFailedAttempts = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.failedAttempts) != null ? _ref : this.cache.failedAttempts = (function() {
        var attempts, run, _i, _len, _ref1;
        attempts = 0;
        _ref1 = _this.getNetRuns();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          run = _ref1[_i];
          if (run.isFailed()) {
            attempts += 1;
          }
        }
        return attempts;
      })();
    };

    TeamProblemStatus.prototype.isAccepted = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.accepted) != null ? _ref : this.cache.accepted = (function() {
        var _ref1, _ref2;
        return (_ref1 = (_ref2 = _this.getNetLastRun()) != null ? _ref2.isJudgedYes() : void 0) != null ? _ref1 : false;
      })();
    };

    TeamProblemStatus.prototype.isFailed = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.failed) != null ? _ref : this.cache.failed = (function() {
        var netr, _ref1, _ref2;
        netr = _this.getNetRuns();
        return (_ref1 = (_ref2 = _this.getNetLastRun()) != null ? _ref2.isFailed() : void 0) != null ? _ref1 : false;
      })();
    };

    TeamProblemStatus.prototype.isPending = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.pending) != null ? _ref : this.cache.pending = (function() {
        var netr, _ref1, _ref2;
        netr = _this.getNetRuns();
        return (_ref1 = (_ref2 = _this.getNetLastRun()) != null ? _ref2.isPending() : void 0) != null ? _ref1 : false;
      })();
    };

    TeamProblemStatus.prototype.getContributingPenalty = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.penalty) != null ? _ref : this.cache.penalty = (function() {
        if (_this.isAccepted()) {
          return (_this.getFailedAttempts()) * 20 + _this.getSolvedTime();
        } else {
          return 0;
        }
      })();
    };

    TeamProblemStatus.prototype.getPenaltyMemoString = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.penaltyMemo) != null ? _ref : this.cache.penaltyMemo = (function() {
        if (_this.isAccepted()) {
          if (_this.getFailedAttempts() === 0) {
            return "" + (_this.getSolvedTime());
          } else {
            return "" + (_this.getSolvedTime()) + " + 20 * " + (_this.getFailedAttempts()) + " = " + (_this.getContributingPenalty());
          }
        } else {
          return '';
        }
      })();
    };

    TeamProblemStatus.prototype.getSolvedTime = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.solvedTime) != null ? _ref : this.cache.solvedTime = (function() {
        var run;
        run = _this.getNetLastRun();
        if ((run != null) && run.isJudgedYes()) {
          return run.getTime();
        } else {
          return null;
        }
      })();
    };

    TeamProblemStatus.prototype.getSolvedRun = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.solvedRun) != null ? _ref : this.cache.solvedRun = (function() {
        var run;
        run = _this.getNetLastRun();
        if ((run != null) && run.isJudgedYes()) {
          return run;
        } else {
          return null;
        }
      })();
    };

    TeamProblemStatus.prototype.update = function(run) {
      var found, idx, oldrun, _ref;
      assert(run.getProblem() === this.getProblem());
      assert(run.getContest() === this.getContest());
      found = false;
      _ref = this.runs;
      for (idx in _ref) {
        oldrun = _ref[idx];
        if (oldrun.getId() === run.getId()) {
          this.runs[idx] = run;
          found = true;
          break;
        }
      }
      if (!found) {
        this.runs.push(run);
      }
      this.runs.sort(function(r1, r2) {
        return r1.getId() - r2.getId();
      });
      this.netruns = null;
      return this.cache = {};
    };

    return TeamProblemStatus;

  })();

  ProblemSummary = (function() {
    function ProblemSummary(contest, problem) {
      this.contest = contest;
      this.problem = problem;
      this.runs = [];
      this.cache = {};
    }

    ProblemSummary.prototype.getContest = function() {
      return this.contest;
    };

    ProblemSummary.prototype.getProblem = function() {
      return this.problem;
    };

    ProblemSummary.prototype.update = function(run) {
      assert(run.getProblem() === this.getProblem(), 'invalid run update');
      this.runs.push(run);
      return this.cache = {};
    };

    ProblemSummary.prototype.getAttempts = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.attempts) != null ? _ref : this.cache.attempts = (function() {
        return _this.runs.length;
      })();
    };

    ProblemSummary.prototype.getAccepted = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.accepted) != null ? _ref : this.cache.accepted = (function() {
        var r, rid, run, _ref1;
        r = 0;
        _ref1 = _this.runs;
        for (rid in _ref1) {
          run = _ref1[rid];
          if (run.isAccepted()) {
            r += 1;
          }
        }
        return r;
      })();
    };

    ProblemSummary.prototype.getFailed = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.failed) != null ? _ref : this.cache.failed = (function() {
        var r, rid, run, _ref1;
        r = 0;
        _ref1 = _this.runs;
        for (rid in _ref1) {
          run = _ref1[rid];
          if (run.isFailed()) {
            r += 1;
          }
        }
        return r;
      })();
    };

    ProblemSummary.prototype.getPending = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.pending) != null ? _ref : this.cache.pending = (function() {
        var r, rid, run, _ref1;
        r = 0;
        _ref1 = _this.runs;
        for (rid in _ref1) {
          run = _ref1[rid];
          if (run.isPending()) {
            r += 1;
          }
        }
        return r;
      })();
    };

    ProblemSummary.prototype.getFirstSolvedTime = function() {
      var _ref,
        _this = this;
      return (_ref = this.cache.firstSolvedTime) != null ? _ref : this.cache.firstSolvedTime = (function() {
        var first_time, rid, run, _ref1;
        first_time = 9999999;
        _ref1 = _this.runs;
        for (rid in _ref1) {
          run = _ref1[rid];
          if (run.isAccepted()) {
            first_time = Math.min(first_time, run.getTime());
          }
        }
        return first_time;
      })();
    };

    ProblemSummary.prototype.isFirstSolved = function(problemStatus) {
      if (!(problemStatus instanceof TeamProblemStatus)) {
        throw new Error('#isFirstSolved : should be TeamProblemStatus');
      }
      return problemStatus.getSolvedTime() === this.getFirstSolvedTime();
    };

    return ProblemSummary;

  })();

  Run = (function() {
    function Run(contest, id, problem, team, time, result) {
      this.contest = contest;
      this.id = id;
      this.problem = problem;
      this.team = team;
      this.time = time;
      this.result = result;
      if (this.contest != null) {
        assert(this.contest === this.problem.getContest());
      }
      if (this.contest != null) {
        assert(this.contest === this.team.getContest());
      }
    }

    Run.prototype.clone = function() {
      return new Run(this.contest, this.id, this.problem, this.team, this.time, this.result);
    };

    Run.prototype.getContest = function() {
      return this.contest;
    };

    Run.prototype.getId = function() {
      return this.id;
    };

    Run.prototype.getProblem = function() {
      return this.problem;
    };

    Run.prototype.getTeam = function() {
      return this.team;
    };

    Run.prototype.getTime = function() {
      return this.time;
    };

    Run.prototype.getStatus = function() {
      return this.status;
    };

    Run.prototype.getResult = function() {
      return this.result;
    };

    Run.prototype.isJudgedYes = function() {
      return this.result.substr(0, 3) === "Yes";
    };

    Run.prototype.isAccepted = function() {
      return this.isJudgedYes();
    };

    Run.prototype.isPending = function() {
      return this.result === "" || this.result.substr(0, 7) === "Pending";
    };

    Run.prototype.isFailed = function() {
      return this.result !== "" && !this.isJudgedYes();
    };

    Run.prototype.setStatus = function(newStatus) {
      var changed;
      changed = this.status === newStatus;
      return this.status = newStatus;
    };

    return Run;

  })();

  Contest = (function() {
    function Contest(contestTitle, systemName, systemVersion, problems, teams) {
      var p, pid, t, tid, _i, _j, _len, _len1;
      this.contestTitle = contestTitle;
      this.systemName = systemName;
      this.systemVersion = systemVersion;
      if (problems == null) {
        problems = [];
      }
      if (teams == null) {
        teams = [];
      }
      if (typeof this.contestTitle !== 'string') {
        throw Error("contestTitle must be a string");
      }
      if (typeof this.systemName !== 'string') {
        throw Error("systemName must be a string");
      }
      if (typeof this.systemVersion !== 'string') {
        throw Error("systemVersion must be a string");
      }
      this.problems = [];
      for (_i = 0, _len = problems.length; _i < _len; _i++) {
        p = problems[_i];
        pid = parseInt(p.id);
        if (typeof pid === 'undefined') {
          continue;
        }
        this.problems.push(new Problem(this, pid, p.name, p.title, p.color));
      }
      this.teams = [];
      for (_j = 0, _len1 = teams.length; _j < _len1; _j++) {
        t = teams[_j];
        tid = parseInt(t.id);
        this.teams[tid] = new Team(this, tid, t.name, t.group);
      }
    }

    Contest.createFromJson = function(contest) {
      var contestTitle, problems, systemName, systemVersion, teams, theContest;
      contestTitle = contest['title'] || 'ACM-ICPC Contest';
      systemName = contest['systemName'] || '';
      systemVersion = contest['systemVersion'] || '';
      problems = assertNotNull(contest['problems']);
      teams = assertNotNull(contest['teams']);
      theContest = new Contest(contestTitle, systemName, systemVersion, problems, teams);
      theContest.initialize();
      return theContest;
    };

    Contest.prototype.initialize = function() {
      var problem, team, tid, _i, _len, _ref, _ref1;
      this.teamStatuses = [];
      _ref = this.teams;
      for (tid in _ref) {
        team = _ref[tid];
        this.teamStatuses[team.getId()] = new TeamStatus(this, team);
      }
      this.rankedTeamStatuses = null;
      this.problemSummarys = [];
      _ref1 = this.problems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        problem = _ref1[_i];
        this.problemSummarys[problem.getId()] = new ProblemSummary(this, problem);
      }
      this.runsIndexed = {};
      this.underRunTransaction = false;
      return this;
    };

    Contest.prototype.getContestTitle = function() {
      return this.contestTitle;
    };

    Contest.prototype.getSystemName = function() {
      return this.systemName;
    };

    Contest.prototype.getSystemVersion = function() {
      return this.systemVersion;
    };

    Contest.prototype.getProblems = function() {
      return this.problems;
    };

    Contest.prototype.getTeams = function() {
      return this.teams;
    };

    Contest.prototype.getProblem = function(p) {
      var pid, prob, _i, _len, _ref, _ref1;
      if (p instanceof Problem) {
        return p;
      }
      if ((_ref = typeof p) === "number" || _ref === "string") {
        pid = parseInt(p);
        _ref1 = this.problems;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          prob = _ref1[_i];
          if (prob.id === pid) {
            return prob;
          }
        }
      }
      throw new Error('#getProblem : illegal argument `p`');
    };

    Contest.prototype.getTeam = function(t) {
      var _ref, _ref1;
      if (t instanceof Team) {
        return t;
      }
      if ((_ref = typeof t) === "number" || _ref === "string") {
        t = parseInt(t);
        if (!isNaN(t)) {
          return this.teams[t];
        }
      } else if ((_ref1 = typeof t.id) === "number" || _ref1 === "string") {
        t = parseInt(t.id);
        if (!isNaN(t)) {
          return this.teams[t];
        }
      }
      throw new Error('#getTeam : illegal argument `t`');
    };

    Contest.prototype.getTeamStatus = function(team) {
      team = this.getTeam(team);
      if (!(team instanceof Team)) {
        throw new Error('#getTeamStatus : illegal argument `team`');
      }
      return this.teamStatuses[team.getId()];
    };

    Contest.prototype.getRankedTeamStatusList = function() {
      this.updateTeamStatusesAndRanks();
      return this.rankedTeamStatuses;
    };

    Contest.prototype.getProblemSummary = function(problem) {
      problem = this.getProblem(problem);
      if (!(problem instanceof Problem)) {
        throw new Error('#getProblemSummary : illegal argument `problem`');
      }
      return this.problemSummarys[problem.getId()];
    };

    Contest.prototype.getRuns = function() {
      return this.runsIndexed;
    };

    Contest.prototype.updateTeamStatusesAndRanks = function() {
      var prevTeamStatus, r, rts, teamComparator, teamStatus, tid, ts;
      rts = (function() {
        var _ref, _results;
        _ref = shallowClone(this.teamStatuses);
        _results = [];
        for (tid in _ref) {
          ts = _ref[tid];
          _results.push(ts);
        }
        return _results;
      }).call(this);
      teamComparator = function(t1, t2) {
        if (t1.getTotalSolved() !== t2.getTotalSolved()) {
          return t2.getTotalSolved() - t1.getTotalSolved();
        }
        if (t1.getPenalty() !== t2.getPenalty()) {
          return t1.getPenalty() - t2.getPenalty();
        }
        if (t1.getLastSolvedTime() !== t2.getLastSolvedTime()) {
          return t1.getLastSolvedTime() - t2.getLastSolvedTime();
        }
        return 0;
      };
      stableSort(rts, teamComparator);
      for (r in rts) {
        teamStatus = rts[r];
        teamStatus.rank = parseInt(r) + 1;
      }
      for (r in rts) {
        teamStatus = rts[r];
        if ((r = parseInt(r)) > 0) {
          prevTeamStatus = rts[r - 1];
          if (teamComparator(prevTeamStatus, teamStatus) === 0) {
            teamStatus.rank = prevTeamStatus.rank;
          }
        }
      }
      this.rankedTeamStatuses = rts;
      return rts;
    };

    Contest.prototype.reflectRun = function(run) {
      var problem, problemSummary, rid, team, teamStatus;
      assert(run instanceof Run, 'run is not an instance of Run');
      assert(run.getContest() === this, 'run is out of the contest context');
      rid = run.getId();
      team = run.getTeam();
      problem = run.getProblem();
      this.runsIndexed[rid] = run;
      teamStatus = this.teamStatuses[team.getId()];
      teamStatus.update(run);
      problemSummary = this.problemSummarys[problem.getId()];
      problemSummary.update(run);
      if (!this.underRunTransaction) {
        return this.updateTeamStatusesAndRanks();
      }
    };

    Contest.prototype.beginRunTransaction = function() {
      if (this.underRunTransaction) {
        throw new Error('already in a transaction');
      } else {
        return this.underRunTransaction = true;
      }
    };

    Contest.prototype.commitRunTransaction = function() {
      if (!this.underRunTransaction) {
        throw new Error('not in a transaction');
      } else {
        this.underRunTransaction = false;
        return this.updateTeamStatusesAndRanks();
      }
    };

    return Contest;

  })();

  RunFeeder = (function() {
    function RunFeeder(contest, strategy) {
      this.contest = contest;
      this.strategy = strategy;
      if (!((this.contest != null) && this.contest instanceof Contest)) {
        throw new Error("contest is undefined or null");
      }
      if (this.strategy === void 0) {
        this.strategy = new FIFORunFeedingStrategy();
      }
      this.strategy.setContest(this.contest);
      this.runCount = 0;
      this.contestTime = 0;
      this.lastTimeStamp = 0;
      this.noMoreUpdate = false;
    }

    RunFeeder.prototype.setStrategy = function(strategy) {
      this.strategy = strategy;
      return this.strategy.setContest(this.contest);
    };

    RunFeeder.prototype.getRunCount = function() {
      return this.runCount;
    };

    RunFeeder.prototype.getContestTime = function() {
      return this.contestTime;
    };

    RunFeeder.prototype.getLastTimeStamp = function() {
      return this.lastTimeStamp;
    };

    RunFeeder.prototype.isNoMoreUpdate = function() {
      return this.noMoreUpdate;
    };

    RunFeeder.prototype.parseRunData = function(data, filter) {
      var contestTime, lastTimeStamp, noMoreUpdate, pid, r, rid, run, runs, tid, timestamp, _i, _len, _ref, _ref1, _ref2, _ref3;
      assertNotNull(data['runs']);
      runs = [];
      _ref = data['runs'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        rid = parseInt(r.id);
        pid = parseInt(r.problem);
        if (isNaN(pid)) {
          pid = parseInt((_ref1 = r.problem) != null ? _ref1.id : void 0);
        }
        tid = parseInt(r.team);
        if (isNaN(tid)) {
          tid = parseInt((_ref2 = r.team) != null ? _ref2.id : void 0);
        }
        run = new Run(this.contest, rid, this.contest.getProblem(pid), this.contest.getTeam(tid), parseInt(r.submissionTime), r.result);
        if (run === null) {
          continue;
        }
        if ((filter != null) && !filter(run)) {
          continue;
        }
        runs.push(run);
      }
      noMoreUpdate = contestTime = lastTimeStamp = null;
      if (data['time']) {
        noMoreUpdate = (_ref3 = data['time'].noMoreUpdate) != null ? _ref3 : {
          "true": false
        };
        contestTime = parseInt(data['time'].contestTime);
        timestamp = parseInt(data['time'].timestamp);
      }
      if (timestamp >= 0) {
        lastTimeStamp = timestamp;
      }
      return [runs, noMoreUpdate, contestTime, lastTimeStamp];
    };

    RunFeeder.prototype.fetchRunsFromJson = function(data, filter) {
      var contestTime, lastTimeStamp, noMoreUpdate, runs, _ref;
      _ref = this.parseRunData(data, filter), runs = _ref[0], noMoreUpdate = _ref[1], contestTime = _ref[2], lastTimeStamp = _ref[3];
      if (noMoreUpdate !== null) {
        this.noMoreUpdate = noMoreUpdate;
      }
      if (contestTime !== null) {
        this.contestTime = contestTime;
      }
      if (lastTimeStamp !== null) {
        this.lastTimeStamp = lastTimeStamp;
      }
      return this.fetchRunsFromArray(runs);
    };

    RunFeeder.prototype.diffAndFeedRuns = function(data, filter) {
      var contestTime, lastTimeStamp, noMoreUpdate, run, runs, _ref;
      _ref = this.parseRunData(data, filter), runs = _ref[0], noMoreUpdate = _ref[1], contestTime = _ref[2], lastTimeStamp = _ref[3];
      if (noMoreUpdate !== null) {
        this.noMoreUpdate = noMoreUpdate;
      }
      if (contestTime !== null) {
        this.contestTime = contestTime;
      }
      if (lastTimeStamp !== null) {
        this.lastTimeStamp = lastTimeStamp;
      }
      runs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = runs.length; _i < _len; _i++) {
          run = runs[_i];
          if (this._isReflectable(run)) {
            _results.push(run);
          }
        }
        return _results;
      }).call(this);
      return this.fetchRunsFromArray(runs);
    };

    RunFeeder.prototype.fetchRunsFromArray = function(runs) {
      var fetched_runs, run, _i, _len;
      fetched_runs = 0;
      for (_i = 0, _len = runs.length; _i < _len; _i++) {
        run = runs[_i];
        this.strategy.pushRun(run);
        this.runCount += 1;
        fetched_runs += 1;
      }
      return fetched_runs;
    };

    RunFeeder.prototype._isReflectable = function(run) {
      var oldRun;
      assert(run instanceof Run, 'run is not an instance of Run');
      assert(run.getContest() === this.contest, 'run is out of the contest context');
      oldRun = null;
      this.runDoEach(function(qrun) {
        if (qrun.getId() === run.getId()) {
          return oldRun = qrun;
        }
      });
      if (!oldRun) {
        oldRun = this.contest.runsIndexed[run.getId()];
      }
      if (!oldRun) {
        return true;
      }
      if (oldRun.isAccepted()) {
        return false;
      }
      if (oldRun.getTime() !== run.getTime()) {
        return true;
      }
      if (oldRun.getResult() !== run.getResult()) {
        return true;
      }
      return false;
    };

    RunFeeder.prototype.discard = function(count) {
      var discarded, i, run, _i;
      if (count == null) {
        count = 1;
      }
      discarded = 0;
      if (count <= 0) {
        return 0;
      }
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        run = this.strategy.popRun();
        this.runCount -= 1;
        if (run == null) {
          break;
        }
        discarded += 1;
      }
      return discarded;
    };

    RunFeeder.prototype.feed = function(count, callback) {
      var i, processed, run, _i;
      if (count == null) {
        count = 1;
      }
      if (callback == null) {
        callback = null;
      }
      processed = 0;
      if (count <= 0) {
        return 0;
      }
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        run = this.strategy.popRun();
        if (run == null) {
          break;
        }
        this.contest.reflectRun(run);
        this.runCount -= 1;
        processed += 1;
        if (callback != null) {
          this.strategy.doCallback(callback, run);
        }
      }
      return processed;
    };

    RunFeeder.prototype.feedWhile = function(fnCriteria) {
      var processed, run;
      processed = 0;
      while (true) {
        run = this.strategy.front();
        if (run == null) {
          break;
        }
        if (fnCriteria(run)) {
          this.strategy.popRun();
          this.contest.reflectRun(run);
          this.runCount -= 1;
          processed += 1;
        } else {
          break;
        }
      }
      return processed;
    };

    RunFeeder.prototype.runDoEach = function(fn) {
      this.strategy.runDoEach(fn);
      return this;
    };

    return RunFeeder;

  })();

  AbstractRunFeedingStrategy = (function() {
    function AbstractRunFeedingStrategy() {}

    AbstractRunFeedingStrategy.prototype.selectRun = function() {
      throw new NotImplementedError();
    };

    AbstractRunFeedingStrategy.prototype.popRun = function() {
      throw new NotImplementedError();
    };

    AbstractRunFeedingStrategy.prototype.front = function() {
      throw new NotImplementedError();
    };

    AbstractRunFeedingStrategy.prototype.setContest = function(contest) {
      return this.contest = contest;
    };

    AbstractRunFeedingStrategy.prototype.runDoEach = function(fn) {
      throw new NotImplementedError();
    };

    AbstractRunFeedingStrategy.prototype.doCallback = function(callback, run) {
      return callback(run);
    };

    return AbstractRunFeedingStrategy;

  })();

  FIFORunFeedingStrategy = (function(_super) {
    __extends(FIFORunFeedingStrategy, _super);

    function FIFORunFeedingStrategy() {
      this.runPools = [];
    }

    FIFORunFeedingStrategy.prototype.popRun = function() {
      var run;
      run = this.runPools.shift();
      return run;
    };

    FIFORunFeedingStrategy.prototype.front = function(run) {
      return this.runPools[0];
    };

    FIFORunFeedingStrategy.prototype.pushRun = function(run) {
      return this.runPools.push(run);
    };

    FIFORunFeedingStrategy.prototype.runDoEach = function(fn) {
      var run, _i, _len, _ref;
      _ref = this.runPools;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        run = _ref[_i];
        fn(run);
      }
      return this;
    };

    return FIFORunFeedingStrategy;

  })(AbstractRunFeedingStrategy);

  TeamProblemSeparatedQueuedRunFeedingStrategy = (function(_super) {
    __extends(TeamProblemSeparatedQueuedRunFeedingStrategy, _super);

    function TeamProblemSeparatedQueuedRunFeedingStrategy(callbackFn) {
      this.callbackFn = callbackFn;
      this.runPools = {};
    }

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.getFrontRunPool = function() {
      var callbackRetObj, pid, problem, runPool, team, tid;
      callbackRetObj = this.callbackFn();
      if (callbackRetObj === null) {
        return null;
      }
      pid = callbackRetObj.problemId;
      tid = callbackRetObj.teamId;
      if (pid === null && tid === null) {
        return null;
      }
      assert((this.contest != null) && this.contest instanceof Contest, "contest is not configured properly");
      if (tid == null) {
        throw new Error("invalid property teamId of the return value of the callback function");
      }
      if (pid == null) {
        throw new Error("invalid property problemId of the return value of the callback function");
      }
      problem = this.contest.getProblem(pid);
      team = this.contest.getTeam(tid);
      if (problem == null) {
        throw new Error("problem is invalidly chosen");
      }
      if (team == null) {
        throw new Error("team is invalidly chosen");
      }
      runPool = this.runPools[tid][pid];
      return runPool;
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.front = function() {
      var runPool;
      runPool = this.getFrontRunPool();
      return runPool[0];
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.popRun = function() {
      var run, runPool;
      runPool = this.getFrontRunPool();
      run = runPool.shift();
      return run;
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.doCallback = function(callback, run) {
      var rp;
      rp = this.runPools[run.getTeam().getId()][run.getProblem().getId()];
      return callback(run, rp.length);
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.setContest = function(contest) {
      var pid, problem, team, tid, _ref, _ref1;
      TeamProblemSeparatedQueuedRunFeedingStrategy.__super__.setContest.call(this, contest);
      assert(contest.getTeams() != null, "team is not configured");
      assert(contest.getProblems() != null, "problem is not configured");
      _ref = contest.getTeams();
      for (tid in _ref) {
        team = _ref[tid];
        this.runPools[team.getId()] = {};
        _ref1 = contest.getProblems();
        for (pid in _ref1) {
          problem = _ref1[pid];
          this.runPools[team.getId()][problem.getId()] = [];
        }
      }
      return this;
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.pushRun = function(run) {
      var pid, tid;
      assert(this.contest != null, "contest must be set properly");
      pid = run.getProblem().getId();
      tid = run.getTeam().getId();
      return this.runPools[tid][pid].push(run);
    };

    TeamProblemSeparatedQueuedRunFeedingStrategy.prototype.runDoEach = function(fn) {
      var pid, problem, rps, run, team, tid, _i, _len, _ref, _ref1;
      _ref = contest.getTeams();
      for (tid in _ref) {
        team = _ref[tid];
        _ref1 = contest.getProblems();
        for (pid in _ref1) {
          problem = _ref1[pid];
          rps = this.runPools[team.getId()][problem.getId()];
          for (_i = 0, _len = rps.length; _i < _len; _i++) {
            run = rps[_i];
            fn(run);
          }
        }
      }
      return this;
    };

    return TeamProblemSeparatedQueuedRunFeedingStrategy;

  })(AbstractRunFeedingStrategy);

  M = {
    Problem: Problem,
    Team: Team,
    Run: Run,
    Contest: Contest,
    TeamStatus: TeamStatus,
    TeamProblemStatus: TeamProblemStatus,
    ProblemSummary: ProblemSummary,
    RunFeeder: RunFeeder,
    FIFORunFeedingStrategy: FIFORunFeedingStrategy,
    TeamProblemSeparatedQueuedRunFeedingStrategy: TeamProblemSeparatedQueuedRunFeedingStrategy
  };

  $.extend(typeof exports !== "undefined" && exports !== null ? exports : this, M);

  return M;

}).call(this);

define("contest", function(){});

// Badger v1.0 by Daniel Raftery
// http://thrivingkings.com/badger
//
// http://twitter.com/ThrivingKings

// modified by Jongwook Choi, under the MIT License

(function( $ )
	{
	$.fn.badger = function(badge, callback) 
		{
  		var badgerExists = this.find('> .Badger').html();
  		
  		// Clear the badge
  		if(!badge)
  			{
  			if(badgerExists)
  				{ this.find('> .Badger').remove(); }
  			}
  		else
  			{
			// Figuring out badge data
			var oldBadge = this.find('> .Badger .Badge').text();
			if(typeof(badge) == 'string')
			{
			if(badge.charAt(0)=='+')
				{ 
				if(isNaN(badge.substr(1)))
					{ badge = oldBadge + badge.substr(1); }
				else
					{ badge = Math.round(Number(oldBadge) + Number(badge.substr(1))); }
				}
			else if(badge.charAt(0)=='-')
				{ 
				if(isNaN(badge.substr(1)))
					{ badge = oldBadge - badge.substr(1); }
				else
					{ badge = Math.round(Number(oldBadge) - Number(badge.substr(1))); }
				}
			}
				
				
			// Don't add duplicates
			if(badgerExists)
				{ this.find('> .Badger .Badge').html(badge); }
			else
				{ this.append('<div class="badger-outter Badger"><div class="badger-inner"><p class="badger-badge Badge">'+badge+'</p></div></div>'); }
				
			// Badger text or number class
			if(isNaN(badge))
				{ this.find('> .Badger .Badge').removeClass('badger-number').addClass('badger-text'); }
			else
				{ this.find('> .Badger .Badge').removeClass('badger-text').addClass('badger-number'); }
			// Send back badge
			if(callback) { callback(badge); }
			}
		return this.find('> .Badger');
		};
})( jQuery );


define("jquery.badger", ["jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.jQuery.fn.badger;
    };
}(this)));

// lib/handlebars/base.js

/*jshint eqnull:true*/
this.Handlebars = {};

(function(Handlebars) {

Handlebars.VERSION = "1.0.rc.1";

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

var toString = Object.prototype.toString, functionType = "[object Function]";

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;


  var ret = "";
  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var ret = "", data;

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && context.length > 0) {
    for(var i=0, j=context.length; i<j; i++) {
      if (data) { data.index = i; }
      ret = ret + fn(context[i], { data: data });
    }
  } else {
    ret = inverse(this);
  }
  return ret;
});

Handlebars.registerHelper('if', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if(!context || Handlebars.Utils.isEmpty(context)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  options.fn = inverse;
  options.inverse = fn;

  return Handlebars.helpers['if'].call(this, context, options);
});

Handlebars.registerHelper('with', function(context, options) {
  return options.fn(context);
});

Handlebars.registerHelper('log', function(context) {
  Handlebars.log(context);
});

}(this.Handlebars));
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"statements":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"params":25,"hash":26,"DATA":27,"param":28,"STRING":29,"INTEGER":30,"BOOLEAN":31,"hashSegments":32,"hashSegment":33,"ID":34,"EQUALS":35,"pathSegments":36,"SEP":37,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",27:"DATA",29:"STRING",30:"INTEGER",31:"BOOLEAN",34:"ID",35:"EQUALS",37:"SEP"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[6,1],[6,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[7,2],[17,3],[17,2],[17,2],[17,1],[17,1],[25,2],[25,1],[28,1],[28,1],[28,1],[28,1],[28,1],[26,1],[32,2],[32,1],[33,3],[33,3],[33,3],[33,3],[33,3],[21,1],[36,3],[36,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]); 
break;
case 3: this.$ = new yy.ProgramNode($$[$0]); 
break;
case 4: this.$ = new yy.ProgramNode([]); 
break;
case 5: this.$ = [$$[$0]]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]); 
break;
case 8: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]); 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = new yy.ContentNode($$[$0]); 
break;
case 12: this.$ = new yy.CommentNode($$[$0]); 
break;
case 13: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 14: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 15: this.$ = $$[$0-1]; 
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true); 
break;
case 18: this.$ = new yy.PartialNode($$[$0-1]); 
break;
case 19: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]); 
break;
case 20: 
break;
case 21: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]]; 
break;
case 22: this.$ = [[$$[$0-1]].concat($$[$0]), null]; 
break;
case 23: this.$ = [[$$[$0-1]], $$[$0]]; 
break;
case 24: this.$ = [[$$[$0]], null]; 
break;
case 25: this.$ = [[new yy.DataNode($$[$0])], null]; 
break;
case 26: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 27: this.$ = [$$[$0]]; 
break;
case 28: this.$ = $$[$0]; 
break;
case 29: this.$ = new yy.StringNode($$[$0]); 
break;
case 30: this.$ = new yy.IntegerNode($$[$0]); 
break;
case 31: this.$ = new yy.BooleanNode($$[$0]); 
break;
case 32: this.$ = new yy.DataNode($$[$0]); 
break;
case 33: this.$ = new yy.HashNode($$[$0]); 
break;
case 34: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 35: this.$ = [$$[$0]]; 
break;
case 36: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 37: this.$ = [$$[$0-2], new yy.StringNode($$[$0])]; 
break;
case 38: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])]; 
break;
case 39: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])]; 
break;
case 40: this.$ = [$$[$0-2], new yy.DataNode($$[$0])]; 
break;
case 41: this.$ = new yy.IdNode($$[$0]); 
break;
case 42: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{1:[3]},{5:[1,16]},{5:[2,3],7:17,8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,19],20:[2,3],22:[1,13],23:[1,14],24:[1,15]},{5:[2,5],14:[2,5],15:[2,5],16:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5]},{4:20,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{4:21,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{17:22,21:23,27:[1,24],34:[1,26],36:25},{17:27,21:23,27:[1,24],34:[1,26],36:25},{17:28,21:23,27:[1,24],34:[1,26],36:25},{17:29,21:23,27:[1,24],34:[1,26],36:25},{21:30,34:[1,26],36:25},{1:[2,1]},{6:31,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{5:[2,6],14:[2,6],15:[2,6],16:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6]},{17:22,18:[1,32],21:23,27:[1,24],34:[1,26],36:25},{10:33,20:[1,34]},{10:35,20:[1,34]},{18:[1,36]},{18:[2,24],21:41,25:37,26:38,27:[1,45],28:39,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,25]},{18:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],34:[2,41],37:[1,48]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],37:[2,43]},{18:[1,49]},{18:[1,50]},{18:[1,51]},{18:[1,52],21:53,34:[1,26],36:25},{5:[2,2],8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,2],22:[1,13],23:[1,14],24:[1,15]},{14:[2,20],15:[2,20],16:[2,20],19:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,7],14:[2,7],15:[2,7],16:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7]},{21:54,34:[1,26],36:25},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{18:[2,22],21:41,26:55,27:[1,45],28:56,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,23]},{18:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],34:[2,27]},{18:[2,33],33:57,34:[1,58]},{18:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],34:[2,28]},{18:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],34:[2,29]},{18:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],34:[2,30]},{18:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],34:[2,31]},{18:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],34:[2,32]},{18:[2,35],34:[2,35]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],35:[1,59],37:[2,43]},{34:[1,60]},{14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,17],14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]},{18:[1,61]},{18:[1,62]},{18:[2,21]},{18:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],34:[2,26]},{18:[2,34],34:[2,34]},{35:[1,59]},{21:63,27:[1,67],29:[1,64],30:[1,65],31:[1,66],34:[1,26],36:25},{18:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],34:[2,42],37:[2,42]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{18:[2,36],34:[2,36]},{18:[2,37],34:[2,37]},{18:[2,38],34:[2,38]},{18:[2,39],34:[2,39]},{18:[2,40],34:[2,40]}],
defaultActions: {16:[2,1],24:[2,25],38:[2,23],55:[2,21]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;
                                 
break;
case 1: return 14; 
break;
case 2:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;
                                 
break;
case 3: return 24; 
break;
case 4: return 16; 
break;
case 5: return 20; 
break;
case 6: return 19; 
break;
case 7: return 19; 
break;
case 8: return 23; 
break;
case 9: return 23; 
break;
case 10: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15; 
break;
case 11: return 22; 
break;
case 12: return 35; 
break;
case 13: return 34; 
break;
case 14: return 34; 
break;
case 15: return 37; 
break;
case 16: /*ignore whitespace*/ 
break;
case 17: this.popState(); return 18; 
break;
case 18: this.popState(); return 18; 
break;
case 19: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 29; 
break;
case 20: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 29; 
break;
case 21: yy_.yytext = yy_.yytext.substr(1); return 27; 
break;
case 22: return 31; 
break;
case 23: return 31; 
break;
case 24: return 30; 
break;
case 25: return 34; 
break;
case 26: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 34; 
break;
case 27: return 'INVALID'; 
break;
case 28: return 5; 
break;
}
};
lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[} ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"INITIAL":{"rules":[0,1,28],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = handlebars;
exports.Parser = handlebars.Parser;
exports.parse = function () { return handlebars.parse.apply(handlebars, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
};
;
// lib/handlebars/compiler/base.js
Handlebars.Parser = handlebars;

Handlebars.parse = function(string) {
  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(string);
};

Handlebars.print = function(ast) {
  return new Handlebars.PrintVisitor().accept(ast);
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  // override in the host environment
  log: function(level, str) {}
};

Handlebars.log = function(level, str) { Handlebars.logger.log(level, str); };
;
// lib/handlebars/compiler/ast.js
(function() {

  Handlebars.AST = {};

  Handlebars.AST.ProgramNode = function(statements, inverse) {
    this.type = "program";
    this.statements = statements;
    if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
  };

  Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
    this.type = "mustache";
    this.escaped = !unescaped;
    this.hash = hash;

    var id = this.id = rawParams[0];
    var params = this.params = rawParams.slice(1);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var eligibleHelper = this.eligibleHelper = id.isSimple;

    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    this.isHelper = eligibleHelper && (params.length || hash);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
  };

  Handlebars.AST.PartialNode = function(id, context) {
    this.type    = "partial";

    // TODO: disallow complex IDs

    this.id      = id;
    this.context = context;
  };

  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
    verifyMatch(mustache.id, close);
    this.type = "block";
    this.mustache = mustache;
    this.program  = program;
    this.inverse  = inverse;

    if (this.inverse && !this.program) {
      this.isInverse = true;
    }
  };

  Handlebars.AST.ContentNode = function(string) {
    this.type = "content";
    this.string = string;
  };

  Handlebars.AST.HashNode = function(pairs) {
    this.type = "hash";
    this.pairs = pairs;
  };

  Handlebars.AST.IdNode = function(parts) {
    this.type = "ID";
    this.original = parts.join(".");

    var dig = [], depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i];

      if(part === "..") { depth++; }
      else if(part === "." || part === "this") { this.isScoped = true; }
      else { dig.push(part); }
    }

    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;
  };

  Handlebars.AST.DataNode = function(id) {
    this.type = "DATA";
    this.id = id;
  };

  Handlebars.AST.StringNode = function(string) {
    this.type = "STRING";
    this.string = string;
  };

  Handlebars.AST.IntegerNode = function(integer) {
    this.type = "INTEGER";
    this.integer = integer;
  };

  Handlebars.AST.BooleanNode = function(bool) {
    this.type = "BOOLEAN";
    this.bool = bool;
  };

  Handlebars.AST.CommentNode = function(comment) {
    this.type = "comment";
    this.comment = comment;
  };

})();;
// lib/handlebars/utils.js
Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  for (var p in tmp) {
    if (tmp.hasOwnProperty(p)) { this[p] = tmp[p]; }
  }

  this.message = tmp.message;
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;";
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (typeof value === "undefined") {
        return true;
      } else if (value === null) {
        return true;
      } else if (value === false) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
Handlebars.Compiler = function() {};
Handlebars.JavaScriptCompiler = function() {};

(function(Compiler, JavaScriptCompiler) {
  // the foundHelper register will disambiguate helper lookup from finding a
  // function in a context. This is necessary for mustache compatibility, which
  // requires that context functions in blocks are evaluated by blockHelperMissing,
  // and then proceed as if the resulting value was provided to blockHelperMissing.

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, out = [], params, param;

      for (var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if (opcode.opcode === 'DECLARE') {
          out.push("DECLARE " + opcode.name + "=" + opcode.value);
        } else {
          params = [];
          for (var j=0; j<opcode.args.length; j++) {
            param = opcode.args[j];
            if (typeof param === "string") {
              param = "\"" + param.replace("\n", "\\n") + "\"";
            }
            params.push(param);
          }
          out.push(opcode.opcode + " " + params.join(" "));
        }
      }

      return out.join("\n");
    },

    guid: 0,

    compile: function(program, options) {
      this.children = [];
      this.depths = {list: []};
      this.options = options;

      // These changes will propagate to the other compiler components
      var knownHelpers = this.options.knownHelpers;
      this.options.knownHelpers = {
        'helperMissing': true,
        'blockHelperMissing': true,
        'each': true,
        'if': true,
        'unless': true,
        'with': true,
        'log': true
      };
      if (knownHelpers) {
        for (var name in knownHelpers) {
          this.options.knownHelpers[name] = knownHelpers[name];
        }
      }

      return this.program(program);
    },

    accept: function(node) {
      return this[node.type](node);
    },

    program: function(program) {
      var statements = program.statements, statement;
      this.opcodes = [];

      for(var i=0, l=statements.length; i<l; i++) {
        statement = statements[i];
        this[statement.type](statement);
      }
      this.isSimple = l === 1;

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++, depth;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache,
          program = block.program,
          inverse = block.inverse;

      if (program) {
        program = this.compileProgram(program);
      }

      if (inverse) {
        inverse = this.compileProgram(inverse);
      }

      var type = this.classifyMustache(mustache);

      if (type === "helper") {
        this.helperMustache(mustache, program, inverse);
      } else if (type === "simple") {
        this.simpleMustache(mustache);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('pushLiteral', '{}');
        this.opcode('blockValue');
      } else {
        this.ambiguousMustache(mustache, program, inverse);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('pushLiteral', '{}');
        this.opcode('ambiguousBlockValue');
      }

      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('push', '{}');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        this.accept(val);
        this.opcode('assignToHash', pair[0]);
      }
    },

    partial: function(partial) {
      var id = partial.id;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'depth0');
      }

      this.opcode('invokePartial', id.original);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      var options = this.options;
      var type = this.classifyMustache(mustache);

      if (type === "simple") {
        this.simpleMustache(mustache);
      } else if (type === "helper") {
        this.helperMustache(mustache);
      } else {
        this.ambiguousMustache(mustache);
      }

      if(mustache.escaped && !options.noEscape) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ambiguousMustache: function(mustache, program, inverse) {
      var id = mustache.id, name = id.parts[0];

      this.opcode('getContext', id.depth);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      this.opcode('invokeAmbiguous', name);
    },

    simpleMustache: function(mustache, program, inverse) {
      var id = mustache.id;

      if (id.type === 'DATA') {
        this.DATA(id);
      } else if (id.parts.length) {
        this.ID(id);
      } else {
        // Simplified ID for `this`
        this.addDepth(id.depth);
        this.opcode('getContext', id.depth);
        this.opcode('pushContext');
      }

      this.opcode('resolvePossibleLambda');
    },

    helperMustache: function(mustache, program, inverse) {
      var params = this.setupFullMustacheParams(mustache, program, inverse),
          name = mustache.id.parts[0];

      if (this.options.knownHelpers[name]) {
        this.opcode('invokeKnownHelper', params.length, name);
      } else if (this.knownHelpersOnly) {
        throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
      } else {
        this.opcode('invokeHelper', params.length, name);
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);

      var name = id.parts[0];
      if (!name) {
        this.opcode('pushContext');
      } else {
        this.opcode('lookupOnContext', id.parts[0]);
      }

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    DATA: function(data) {
      this.options.data = true;
      this.opcode('lookupData', data.id);
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('pushLiteral', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('pushLiteral', bool.bool);
    },

    comment: function() {},

    // HELPERS
    opcode: function(name) {
      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
    },

    declare: function(name, value) {
      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
    },

    addDepth: function(depth) {
      if(isNaN(depth)) { throw new Error("EWOT"); }
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    classifyMustache: function(mustache) {
      var isHelper   = mustache.isHelper;
      var isEligible = mustache.eligibleHelper;
      var options    = this.options;

      // if ambiguous, we can possibly resolve the ambiguity now
      if (isEligible && !isHelper) {
        var name = mustache.id.parts[0];

        if (options.knownHelpers[name]) {
          isHelper = true;
        } else if (options.knownHelpersOnly) {
          isEligible = false;
        }
      }

      if (isHelper) { return "helper"; }
      else if (isEligible) { return "ambiguous"; }
      else { return "simple"; }
    },

    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.string);
        } else {
          this[param.type](param);
        }
      }
    },

    setupMustacheParams: function(mustache) {
      var params = mustache.params;
      this.pushParams(params);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('pushLiteral', '{}');
      }

      return params;
    },

    // this will replace setupMustacheParams when we're done
    setupFullMustacheParams: function(mustache, program, inverse) {
      var params = mustache.params;
      this.pushParams(params);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('pushLiteral', '{}');
      }

      return params;
    }
  };

  var Literal = function(value) {
    this.value = value;
  };

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name, type) {
      if (/^[0-9]+$/.test(name)) {
        return parent + "[" + name + "]";
      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
        return parent + "." + name;
      }
      else {
        return parent + "['" + name + "']";
      }
    },

    appendToBuffer: function(string) {
      if (this.environment.isSimple) {
        return "return " + string + ";";
      } else {
        return "buffer += " + string + ";";
      }
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },

    namespace: "Handlebars",
    // END PUBLIC API

    compile: function(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options || {};

      Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        programs: [],
        aliases: { }
      };

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = { list: [] };
      this.compileStack = [];

      this.compileChildren(environment, options);

      var opcodes = environment.opcodes, opcode;

      this.i = 0;

      for(l=opcodes.length; this.i<l; this.i++) {
        opcode = opcodes[this.i];

        if(opcode.opcode === 'DECLARE') {
          this[opcode.name] = opcode.value;
        } else {
          this[opcode.opcode].apply(this, opcode.args);
        }
      }

      return this.createFunctionContext(asObject);
    },

    nextOpcode: function() {
      var opcodes = this.environment.opcodes, opcode = opcodes[this.i + 1];
      return opcodes[this.i + 1];
    },

    eat: function(opcode) {
      this.i = this.i + 1;
    },

    preamble: function() {
      var out = [];

      if (!this.isChild) {
        var namespace = this.namespace;
        var copies = "helpers = helpers || " + namespace + ".helpers;";
        if (this.environment.usePartial) { copies = copies + " partials = partials || " + namespace + ".partials;"; }
        if (this.options.data) { copies = copies + " data = data || {};"; }
        out.push(copies);
      } else {
        out.push('');
      }

      if (!this.environment.isSimple) {
        out.push(", buffer = " + this.initializeBuffer());
      } else {
        out.push("");
      }

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunctionContext: function(asObject) {
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[1] = this.source[1] + ", " + locals.join(", ");
      }

      // Generate minimizer alias mappings
      if (!this.isChild) {
        var aliases = [];
        for (var alias in this.context.aliases) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }

      if (this.source[1]) {
        this.source[1] = "var " + this.source[1].substring(2) + ";";
      }

      // Merge children
      if (!this.isChild) {
        this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
      }

      if (!this.environment.isSimple) {
        this.source.push("return buffer;");
      }

      var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      if (asObject) {
        params.push(this.source.join("\n  "));

        return Function.apply(this, params);
      } else {
        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + this.source.join("\n  ") + '}';
        Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
        return functionSource;
      }
    },

    // [blockValue]
    //
    // On stack, before: hash, inverse, program, value
    // On stack, after: return value of blockHelperMissing
    //
    // The purpose of this opcode is to take a block of the form
    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
    // replace it on the stack with the result of properly
    // invoking blockHelperMissing.
    blockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      this.replaceStack(function(current) {
        params.splice(1, 0, current);
        return current + " = blockHelperMissing.call(" + params.join(", ") + ")";
      });
    },

    // [ambiguousBlockValue]
    //
    // On stack, before: hash, inverse, program, value
    // Compiler value, before: lastHelper=value of last found helper, if any
    // On stack, after, if no lastHelper: same as [blockValue]
    // On stack, after, if lastHelper: value
    ambiguousBlockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      var current = this.topStack();
      params.splice(1, 0, current);

      this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
    },

    // [appendContent]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Appends the string value of `content` to the current buffer
    appendContent: function(content) {
      this.source.push(this.appendToBuffer(this.quotedString(content)));
    },

    // [append]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Coerces `value` to a String and appends it to the current buffer.
    //
    // If `value` is truthy, or 0, it is coerced into a string and appended
    // Otherwise, the empty string is appended
    append: function() {
      var local = this.popStack();
      this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
      if (this.environment.isSimple) {
        this.source.push("else { " + this.appendToBuffer("''") + " }");
      }
    },

    // [appendEscaped]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Escape `value` and append it to the buffer
    appendEscaped: function() {
      var opcode = this.nextOpcode(), extra = "";
      this.context.aliases.escapeExpression = 'this.escapeExpression';

      if(opcode && opcode.opcode === 'appendContent') {
        extra = " + " + this.quotedString(opcode.args[0]);
        this.eat(opcode);
      }

      this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")" + extra));
    },

    // [getContext]
    //
    // On stack, before: ...
    // On stack, after: ...
    // Compiler value, after: lastContext=depth
    //
    // Set the value of the `lastContext` compiler value to the depth
    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;
      }
    },

    // [lookupOnContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext[name], ...
    //
    // Looks up the value of `name` on the current context and pushes
    // it onto the stack.
    lookupOnContext: function(name) {
      this.pushStack(this.nameLookup('depth' + this.lastContext, name, 'context'));
    },

    // [pushContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext, ...
    //
    // Pushes the value of the current context onto the stack.
    pushContext: function() {
      this.pushStackLiteral('depth' + this.lastContext);
    },

    // [resolvePossibleLambda]
    //
    // On stack, before: value, ...
    // On stack, after: resolved value, ...
    //
    // If the `value` is a lambda, replace it on the stack by
    // the return value of the lambda
    resolvePossibleLambda: function() {
      this.context.aliases.functionType = '"function"';

      this.replaceStack(function(current) {
        return "typeof " + current + " === functionType ? " + current + "() : " + current;
      });
    },

    // [lookup]
    //
    // On stack, before: value, ...
    // On stack, after: value[name], ...
    //
    // Replace the value on the stack with the result of looking
    // up `name` on `value`
    lookup: function(name) {
      this.replaceStack(function(current) {
        return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
      });
    },

    // [lookupData]
    //
    // On stack, before: ...
    // On stack, after: data[id], ...
    //
    // Push the result of looking up `id` on the current data
    lookupData: function(id) {
      this.pushStack(this.nameLookup('data', id, 'data'));
    },

    // [pushStringParam]
    //
    // On stack, before: ...
    // On stack, after: string, currentContext, ...
    //
    // This opcode is designed for use in string mode, which
    // provides the string value of a parameter along with its
    // depth rather than resolving it immediately.
    pushStringParam: function(string) {
      this.pushStackLiteral('depth' + this.lastContext);
      this.pushString(string);
    },

    // [pushString]
    //
    // On stack, before: ...
    // On stack, after: quotedString(string), ...
    //
    // Push a quoted version of `string` onto the stack
    pushString: function(string) {
      this.pushStackLiteral(this.quotedString(string));
    },

    // [push]
    //
    // On stack, before: ...
    // On stack, after: expr, ...
    //
    // Push an expression onto the stack
    push: function(expr) {
      this.pushStack(expr);
    },

    // [pushLiteral]
    //
    // On stack, before: ...
    // On stack, after: value, ...
    //
    // Pushes a value onto the stack. This operation prevents
    // the compiler from creating a temporary variable to hold
    // it.
    pushLiteral: function(value) {
      this.pushStackLiteral(value);
    },

    // [pushProgram]
    //
    // On stack, before: ...
    // On stack, after: program(guid), ...
    //
    // Push a program expression onto the stack. This takes
    // a compile-time guid and converts it into a runtime-accessible
    // expression.
    pushProgram: function(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },

    // [invokeHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // Pops off the helper's parameters, invokes the helper,
    // and pushes the helper's return value onto the stack.
    //
    // If the helper is not found, `helperMissing` is called.
    invokeHelper: function(paramSize, name) {
      this.context.aliases.helperMissing = 'helpers.helperMissing';

      var helper = this.lastHelper = this.setupHelper(paramSize, name);
      this.register('foundHelper', helper.name);

      this.pushStack("foundHelper ? foundHelper.call(" +
        helper.callParams + ") " + ": helperMissing.call(" +
        helper.helperMissingParams + ")");
    },

    // [invokeKnownHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // This operation is used when the helper is known to exist,
    // so a `helperMissing` fallback is not required.
    invokeKnownHelper: function(paramSize, name) {
      var helper = this.setupHelper(paramSize, name);
      this.pushStack(helper.name + ".call(" + helper.callParams + ")");
    },

    // [invokeAmbiguous]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of disambiguation
    //
    // This operation is used when an expression like `{{foo}}`
    // is provided, but we don't know at compile-time whether it
    // is a helper or a path.
    //
    // This operation emits more code than the other options,
    // and can be avoided by passing the `knownHelpers` and
    // `knownHelpersOnly` flags at compile-time.
    invokeAmbiguous: function(name) {
      this.context.aliases.functionType = '"function"';

      this.pushStackLiteral('{}');
      var helper = this.setupHelper(0, name);

      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
      this.register('foundHelper', helperName);

      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
      var nextStack = this.nextStack();

      this.source.push('if (foundHelper) { ' + nextStack + ' = foundHelper.call(' + helper.callParams + '); }');
      this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '() : ' + nextStack + '; }');
    },

    // [invokePartial]
    //
    // On stack, before: context, ...
    // On stack after: result of partial invocation
    //
    // This operation pops off a context, invokes a partial with that context,
    // and pushes the result of the invocation back.
    invokePartial: function(name) {
      var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

      if (this.options.data) {
        params.push("data");
      }

      this.context.aliases.self = "this";
      this.pushStack("self.invokePartial(" + params.join(", ") + ");");
    },

    // [assignToHash]
    //
    // On stack, before: value, hash, ...
    // On stack, after: hash, ...
    //
    // Pops a value and hash off the stack, assigns `hash[key] = value`
    // and pushes the hash back onto the stack.
    assignToHash: function(key) {
      var value = this.popStack();
      var hash = this.topStack();

      this.source.push(hash + "['" + key + "'] = " + value + ";");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context);
      }
    },

    programExpression: function(guid) {
      this.context.aliases.self = "this";

      if(guid == null) {
        return "self.noop";
      }

      var child = this.environment.children[guid],
          depths = child.depths.list, depth;

      var programParams = [child.index, child.name, "data"];

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("depth0"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      if(depths.length === 0) {
        return "self.program(" + programParams.join(", ") + ")";
      } else {
        programParams.shift();
        return "self.programWithDepth(" + programParams.join(", ") + ")";
      }
    },

    register: function(name, val) {
      this.useRegister(name);
      this.source.push(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStackLiteral: function(item) {
      this.compileStack.push(new Literal(item));
      return item;
    },

    pushStack: function(item) {
      this.source.push(this.incrStack() + " = " + item + ";");
      this.compileStack.push("stack" + this.stackSlot);
      return "stack" + this.stackSlot;
    },

    replaceStack: function(callback) {
      var item = callback.call(this, this.topStack());

      this.source.push(this.topStack() + " = " + item + ";");
      return "stack" + this.stackSlot;
    },

    nextStack: function(skipCompileStack) {
      var name = this.incrStack();
      this.compileStack.push("stack" + this.stackSlot);
      return name;
    },

    incrStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return "stack" + this.stackSlot;
    },

    popStack: function() {
      var item = this.compileStack.pop();

      if (item instanceof Literal) {
        return item.value;
      } else {
        this.stackSlot--;
        return item;
      }
    },

    topStack: function() {
      var item = this.compileStack[this.compileStack.length - 1];

      if (item instanceof Literal) {
        return item.value;
      } else {
        return item;
      }
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r') + '"';
    },

    setupHelper: function(paramSize, name) {
      var params = [];
      this.setupParams(paramSize, params);
      var foundHelper = this.nameLookup('helpers', name, 'helper');

      return {
        params: params,
        name: foundHelper,
        callParams: ["depth0"].concat(params).join(", "),
        helperMissingParams: ["depth0", this.quotedString(name)].concat(params).join(", ")
      };
    },

    // the params and contexts arguments are passed in arrays
    // to fill in
    setupParams: function(paramSize, params) {
      var options = [], contexts = [], param, inverse, program;

      options.push("hash:" + this.popStack());

      inverse = this.popStack();
      program = this.popStack();

      // Avoid setting fn and inverse if neither are set. This allows
      // helpers to do a check for `if (options.fn)`
      if (program || inverse) {
        if (!program) {
          this.context.aliases.self = "this";
          program = "self.noop";
        }

        if (!inverse) {
         this.context.aliases.self = "this";
          inverse = "self.noop";
        }

        options.push("inverse:" + inverse);
        options.push("fn:" + program);
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          contexts.push(this.popStack());
        }
      }

      if (this.options.stringParams) {
        options.push("contexts:[" + contexts.join(",") + "]");
      }

      if(this.options.data) {
        options.push("data:data");
      }

      params.push("{" + options.join(",") + "}");
      return params.join(", ");
    }
  };

  var reservedWords = (
    "break else new var" +
    " case finally return void" +
    " catch for switch while" +
    " continue function this with" +
    " default if throw" +
    " delete in try" +
    " do instanceof typeof" +
    " abstract enum int short" +
    " boolean export interface static" +
    " byte extends long super" +
    " char final native synchronized" +
    " class float package throws" +
    " const goto private transient" +
    " debugger implements protected volatile" +
    " double import public let yield"
  ).split(" ");

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
      return true;
    }
    return false;
  };

})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.precompile = function(string, options) {
  options = options || {};

  var ast = Handlebars.parse(string);
  var environment = new Handlebars.Compiler().compile(ast, options);
  return new Handlebars.JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(string, options) {
  options = options || {};

  var compiled;
  function compile() {
    var ast = Handlebars.parse(string);
    var environment = new Handlebars.Compiler().compile(ast, options);
    var templateSpec = new Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};
;
// lib/handlebars/runtime.js
Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          return Handlebars.VM.program(fn, data);
        } else if(programWrapper) {
          return programWrapper;
        } else {
          programWrapper = this.programs[i] = Handlebars.VM.program(fn);
          return programWrapper;
        }
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop
    };

    return function(context, options) {
      options = options || {};
      return templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);
    };
  },

  programWithDepth: function(fn, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 2);

    return function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
  },
  program: function(fn, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;

define("handlebars", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Handlebars;
    };
}(this)));

define('spotboard.util',[
    'jquery',
    'spotboard',

    'handlebars'
],
function($, Spotboard) {

    Spotboard.Util = {};

    Spotboard.Util.hsv2rgb = function hsv2rgb(h, s, v) {
        h = (h % 1 + 1) % 1; // wrap hue

        var i = Math.floor(h * 6),
            f = h * 6 - i,
            p = v * (1 - s),
            q = v * (1 - s * f),
            t = v * (1 - s * (1 - f));

        var res = (function(){
            switch (i) {
                case 0: return [v, t, p];
                case 1: return [q, v, p];
                case 2: return [p, v, t];
                case 3: return [p, q, v];
                case 4: return [t, p, v];
                case 5: return [v, p, q];
                default: return [0, 0, 0];
            }
        })();

        var red = Math.floor(res[0] * 255).toString(16);
        if (red.length == 1) red = '0' + red;
        var green = Math.floor(res[1] * 255).toString(16);
        if (green.length == 1) green = '0' + green;
        var blue = Math.floor(res[2] * 255).toString(16);
        if (blue.length == 1) blue = '0' + blue;

        return '#' + red + green + blue;
    };

    Spotboard.Util.toTimeDisplayString = function (seconds) {

        function positivefill(num, len) {
            return (Array(len).join("0") + num).slice(-len);
        }
        function zerofill(num, len) {
            return (num < 0 ? '-' : '') + positivefill(Math.abs(num), len);
        }

        var contestTime = parseInt(seconds);
        if(isNaN(contestTime)) return 'xx:xx';

        var minutes = parseInt(seconds / 60);
        var hours = parseInt(minutes / 60);

        var hr = zerofill(hours, 2);
        var mt = zerofill(minutes % 60, 2);
        var sc = zerofill(contestTime % 60, 2);

        return (hr + ':' + mt + ':' + sc);
    };

    /**
     * jQuery.deferred 를 리턴하는 함수 f에 대해
     * critical section mutex 락을 걸도록 decorate한 함수를 리턴한다.
     */
    Spotboard.Util.withDeferredLock = function(f) {
        var locked = false;
        var mutex = {
            tryLock : function() {
                if(locked) return false;
                locked = true;
                return true;
            },
            release: function() {
                locked = false;
            }
        };

        // try acquire lock
        return function decoratedLock() {
            if(!mutex.tryLock()) return 'locked';

            var $df = f.apply(this, arguments);
            if($df) $df.always(mutex.release);
            return $df;
        }
    };

    Spotboard.Util.ordinalSuffix = function ordinalSuffix(v)
    {
        if(11 <= v % 100 && v % 100 <= 13) return 'th';
        if(v % 10 == 1) return 'st';
        if(v % 10 == 2) return 'nd';
        if(v % 10 == 3) return 'rd';
        return 'th';
    };

    Handlebars.registerHelper('ordinalSuffix',
        Spotboard.Util.ordinalSuffix
    );

    return Spotboard.Util;

});

var p_width = 3.5;
define('spotboard.view',[
    'jquery',
    'handlebars',
    'spotboard',

    'spotboard.util'
],
function($, Handlebars, Spotboard) {

    Spotboard.View = { };
    Spotboard.View.search_filter = '';
    Spotboard.View.page = 0;
    Spotboard.View.search_page = 0;

    /**
     * contest의 기본 정보들을 DOM에 표시해줌
     */
    Spotboard.View.displayContestInformation = function() {
        var contest = Spotboard.contest;
        $("head > title , #contest-title").text(
            contest.getContestTitle()
        );
        $("#system-information").text(
            contest.getSystemName() + " " + contest.getSystemVersion()
        );

        if (Spotboard.__version__) {
          var version = "v" + Spotboard.__version__;
          if (Spotboard.config.environment === 'develop')
              version += "-devel";
          $("#spotboard-version").text(version);
        }
    };

    /**
     * System Message notification
     */
    Spotboard.View.displaySystemMessage = function(msg, color) {
        if(!msg) return;
        if(!color) color = 'black';
        $("#loading-message").text(msg).css('color', color);
    };

    /**
     * color, balloon, counter 관련한 CSS를 동적으로 추가함
     */
    Spotboard.View.initStyles = function() {
        var contest = Spotboard.contest;

        var problems = contest.getProblems();
        var hsv_from = [-2/360, 0.96, 0.31];
        var hsv_to = [105/360, 0.96, 0.31];
        var $style= $('<style type="text/css" id="problem-balloon-style"></style>');
        for (var i = 0; i <= problems.length;i++)
        {
            var ratio = i / problems.length;
            var h = hsv_from[0] * (1 - ratio) + hsv_to[0] * ratio;
            var s = hsv_from[1] * (1 - ratio) + hsv_to[1] * ratio;
            var v = hsv_from[2] * (1 - ratio) + hsv_to[2] * ratio;
            if (i % 2 == 1) {
                s = Math.max(s - 0.15, 0);
                v = Math.min(v + 0.1, 1);
            }

            $style.append(
'.solved-' + i + ' .solved-count { background-color: ' + Spotboard.Util.hsv2rgb(h, s, v) + '; }\n'
            );
        }

        for (var i = 0; i < problems.length;i++)
        {
            var problem = problems[i];
            if(!problem) continue;
            var pid = problem.getId();
            var probColor = problem.getColor();
            $style.append(
'.problem-result.problem-' + pid + ' b:before { content: "' + problems[i].getName() + '"; }\n'
            );
            if(probColor) $style.append(
'.balloon.problem-' + pid + ' { background-image: url(assets/balloons/' + probColor + '.png); }\n'
            );

            // balloon 이미지를 prefetch (DOM 그린 후 요청하면 풍선이 너무 늦게 뜸)
            new Image().src = 'assets/balloons/' + probColor + '.png';
        }

        $('head').append($style);
    };


    // team list template (handlebars) from index.html
    Spotboard.JST['teamlist'] = (function() {
        var html = $('#team-handlebar-template').html().trim();
        if(!html) throw new Error('team-handlebar-template is missing');
        return Handlebars.compile(html);
    })();

    /**
     * Scoreboard 를 처음부터 그린다.
     */
    Spotboard.View.drawScoreboard = function() {
        var contest = Spotboard.contest,
            problems = contest.getProblems(),
            ranked_teamstats = contest.getRankedTeamStatusList();

        if(Spotboard.config['show_team_group'])
            $("#wrapper").addClass('show-group');
        if(Spotboard.config['animation'] == false)
            $("#wrapper").addClass('no-animation');
        if(Spotboard.config['pagination'])
            $("#wrapper").addClass('pagination');

        var $teamlist = $("#team-list").empty();
        var isTeamInfoHidden = Spotboard.config['award_mode'] && Spotboard.config['award_hide_name'];

        /**
         * Scoreboard를 그리기 위해 필요한 내부 메소드로,
         * 하나의 team을 나타내는 div element (jQuery Wrapper object)를 새로 만들어 반환한다.
         *
         * @see Spotboard.JST['teamlist'] handlebar 템플릿 (index.html)
         */
        var createTeamElement = function(team) {

            var $item = $(Spotboard.JST['teamlist']({
                id : team.getId(),
                solved : 0,
                rank : 1,
                suffix : "st",    // 어차피 나중에 update 할 것임. 그전까지만 1st
                name : isTeamInfoHidden ? "Team " + team.getId() : team.getName(),
                group : isTeamInfoHidden ? "Unknown" : team.getGroup(),
                penalty : 0,
                problems: problems
            }) );
            $item.data('team-id', team.getId());

            // TODO improve with css
            if(isTeamInfoHidden) $item.find('.team-name, .team-represents').addClass('award-hidden');

            return $item;
        };

        for(var idx in ranked_teamstats)
        {
            var team = ranked_teamstats[idx].getTeam();
            // 스코어보드에서 제외된 팀 처리
            // TODO 의존성의 방향이 좋지 못함 (Manager 참조하면 안됨). Refactoring
            if(Spotboard.Manager.isTeamExcluded(team))
                continue;
            $teamlist.append(createTeamElement(team));
        }

        // 해외팀 처리
        if(Spotboard.config['foreign_teams']) {
            var foreign_teams = Spotboard.config['foreign_teams'];
            if(typeof foreign_teams === "function") {
                // as team filters
                var is_foreign_team = foreign_teams;
                var all_teams = contest.getTeams();
                foreign_teams = [];
                for(var id in all_teams) {
                    var team = all_teams[id];
                    if(!team) continue;
                    if(is_foreign_team(team)) {
                        foreign_teams.push(team.getId());
                    }
                }
            }

            // list of foreign team ids are given
            $.each(foreign_teams, function(idx, val) {
                $("#team-" + val).addClass('foreign');
            });
        }

        // team to follow
        if(Spotboard.config['team_to_follow']) {
            var teamId = Spotboard.config['team_to_follow'];
            var $team = $("#team-" + teamId);
            $team.addClass('followed');
        }

        // sticky 기능 : IE에서는 crash 버그가 있어 webkit만 지원
        if(! Spotboard.browser.webkit) {
            Spotboard.config['use_followed_team_sticky'] = false;
        }
        if(Spotboard.config['team_to_follow'] && Spotboard.config['use_followed_team_sticky']) {
            var teamId = Spotboard.config['team_to_follow'];
            var $team = $("#team-" + teamId);

            var height = $team.height();
            stickyOption = {
                top : $team.offset().top,
            };

            var scrollHandler = function() {
                var stickyClass = (function() {
                    var r = '';
                    var y = $(window).scrollTop();
                    if(y + 0.5 * height >= stickyOption.top) { r = 'sticky-top'; }
                    else if(y + window.innerHeight - height <= stickyOption.top) { r = 'sticky-bottom'; }
                    else { return ''; }

                    // 특수 처리: pagination을 넘어있는 경우에는 항상 고정
                    if($team.hasClass('beyond-page-prev')) { r = 'sticky-top'; }
                    else if($team.hasClass('beyond-page-next')) { r = 'sticky-bottom'; }

                    return r;
                });
                $team.removeClass('sticky-top sticky-bottom').addClass(stickyClass);
            };

            $(window).scroll(scrollHandler);
            $(Spotboard).one('drew', scrollHandler);

            var updateStickyOptionHandler = function() {
                if(! $team.hasClass('hidden')) {
                    // 이미 $team이 sticky 되어 있으면 position:fixed라서 offset()이 원하는 대로 안나온다.
                    // fixed 되지 않아야 올바른 offset이 얻어지므로 잠시 CSS로 바꾸는 트릭을 쓴다.
                    $team.css('position', 'relative');
                    stickyOption.top = $team.offset().top;
                    $team.css('position', '');
                }
                $(window).trigger('scroll');
            };

            $(Spotboard).bind('visibilityUpdated', updateStickyOptionHandler);
            $(Spotboard).bind('teamPositionUpdated', updateStickyOptionHandler);
        }

        Spotboard.View.refreshScoreboard();
        $(Spotboard).trigger('drew');
    };

    /**
     * Scoreboard 를 애니메이션 없이 전체 갱신한다.
     */
    Spotboard.View.refreshScoreboard = function() {
        var contest = Spotboard.contest,
            problems = contest.getProblems(),
            ranked_teamstats = contest.getRankedTeamStatusList();
        var $teamlist = $('#team-list');
        var teamsInOrder = [];

        for(var idx in ranked_teamstats)
        {
            var team = ranked_teamstats[idx].getTeam();
            var $team = $teamlist.find('#team-' + team.getId());
            if(!$team.length) continue;

            // 실제 rank 순서대로 DOM을 처리하기 위해 detach한 뒤 $teamlist에 append
            $team.detach();
            Spotboard.View.updateTeamStatus($team);
            teamsInOrder.push($team);
        }
        for(var i in teamsInOrder)
            $teamlist.append(teamsInOrder[i]);

        Spotboard.View.updateVisibility();
        $(Spotboard).trigger('teamPositionUpdated');
    };

    /**
     * 팀 표시 여부 업데이트 (검색/페이지네이션 조건 등에 따라
     * 현재 화면에 보여질 팀들을 show/hide 한다.)
     *
     * 덩달아 페이지네이션 정보도 같이 업데이트한다.
     * @event visibilityUpdated
     */
    Spotboard.View.updateVisibility = function() {
        var contest = Spotboard.contest;
        var is_searching = Spotboard.View.search_filter != '';

        var usePagination = Spotboard.config['pagination'] || false;
        // award 모드에서는 pagination 사용 안함.
        if(Spotboard.config['award_mode']) usePagination = false;
        var page_size = usePagination ? (Spotboard.config['pagination_size'] || 50) : 100000;

        var target_page = !is_searching ? Spotboard.View.page : Spotboard.View.search_page;
        var search_regex = is_searching ? new RegExp(Spotboard.View.search_filter, 'i') : null;

        // 0-indexed range for this page
        var begin = target_page * page_size;
        var end = (target_page + 1) * page_size;
        var effective_idx = 0;
        var $teams = $('#team-list > .team');

        var visibleTeams = [];
        $teams.removeClass('visible-first beyond-page-prev beyond-page-next');

        $teams.addClass('hidden').each(function(idx, team_dom) {
            var $team = $(team_dom),
                teamId = $team.data('team-id'),
                team = contest.getTeam(teamId);
            if (search_regex && !search_regex.test(team.getName()) && !search_regex.test(team.getGroup(true)))
            {
                return;
            }

            if (begin <= effective_idx && effective_idx < end) {
                // set visible.
                $team.removeClass('hidden');
                visibleTeams.push($team);
            }
            else if ($team.hasClass('followed')) {
                // followed 팀은 페이지가 넘어가도 항상 보인다.
                $team.removeClass('hidden');
                if(effective_idx < begin) $team.addClass('beyond-page-prev');
                if(effective_idx >= end)  $team.addClass('beyond-page-next');
            }
            effective_idx++;
        });

        if(visibleTeams.length > 0) {
            // mark first visible team except the followed
            $(visibleTeams[0]).addClass('visible-first');
        }

        // num of total Pages (>=1)
        var totalPages = parseInt(Math.max(1, (effective_idx - 1) / page_size + 1));

        // 페이지네이션 navigation을 업데이트
        $("#page-label span.current-page").text(target_page + 1);
        $("#page-label span.max-page").text(totalPages);

        var pagerLeftEnabled = (target_page > 0);
        var pagerRightEnabled = (target_page + 1 < totalPages);

        $("#page-left" ).removeClass('disabled').addClass(pagerLeftEnabled  ? '' : 'disabled');
        $("#page-right").removeClass('disabled').addClass(pagerRightEnabled ? '' : 'disabled');

        Spotboard.View.updateSolvedCountVisibility();
        $(Spotboard).trigger('visibilityUpdated');
    };

    /* 페이지네이션 */
    Spotboard.View.paginate = function(amt) {
        amt = parseInt(amt) || 0;
        if(!amt) return;
        // TODO : page underflow, overflow 방어처리 (page 모델 분리 이후)

        var is_searching = Spotboard.View.search_filter != '';
        if(!is_searching)
            Spotboard.View.page += amt;
        else
            Spotboard.View.search_page += amt;

        Spotboard.View.updateVisibility();
    };


    /**
     * 팀 등수 업데이트
     */
    Spotboard.View.updateTeamRank = function($team, rank) {
        $team.find(".team-rank")
            .text(rank)
            .removeClass( function(index, css) {
                return css.match(/suffix-.*/).join(' ');
            })
            .addClass( 'suffix-' + Spotboard.Util.ordinalSuffix(rank) );
        return $team;
    };

    /**
     * 하나의 team element에 대한 상태를 업데이트한다.
     */
    Spotboard.View.updateTeamStatus = function($team) {
        if($team == null || !$team.length) return;
        var contest = Spotboard.contest,
            problems = contest.getProblems(),
            teamId = $team.data('team-id'),
            teamStatus = contest.getTeamStatus(teamId);

        // 문제푼 갯수
        var solved = teamStatus.getTotalSolved();
        $team.removeClass( function(index, css) { return css.match(/solved-\d*/).join(' '); } )
            .addClass('solved-' + solved);        // TODO improve with css

        $team.find('.solved-count').text(solved);

        // 페널티
        var penalty = teamStatus.getPenalty();
        if(penalty >= 10000) p_width = Math.max(p_width, 4.5);
        else if(penalty >= 100000) p_width = Math.max(p_width, 5.5);
        $team.find(".team-penalty").text(penalty);
        $team.find(".team-penalty").css('width', p_width + 'em');
        // 등수
        var rank = teamStatus.getRank();
        Spotboard.View.updateTeamRank($team, rank);

        // 각 문제별 상태 업데이트
        var problemsNewlySolved = [];
        $team.find(".problem-result").each( function(index) {
            // TODO index를 attr로 선택하도록
            var problem = problems[index];
            var problemStat = teamStatus.getProblemStatus(problem);

            $(this).removeClass('solved failed pending');
            if(problemStat.isAccepted()) {
                // solved the problem, add balloon and play sound effects
                solved_problem['problem-' + problem['id']] = true;
                $(this).addClass('solved');
                if($team.find('.balloon.problem-' + problem["id"]).length == 0)
                    problemsNewlySolved.push(problemStat);

                // tool text for the run
                // NOTE: if first solved, additional suffix follows. (see .solved-first:after CSS)
                var penalty_string = 'Solved at ' + problemStat.getSolvedTime() + ' min.';
                $(this).attr('data-balloon', penalty_string);
                $(this).attr('data-balloon-pos', 'down');

                // detect if first solved
                if(Spotboard.config['show_first_solve']) {
                    var problemSummary = contest.getProblemSummary(problem);
                    if(problemSummary.isFirstSolved(problemStat)) {
                        $(this).addClass('solved-first')
                        var solvedFirstTime = problemStat.getSolvedTime();

                        // invalidate all other previous first-solved runs
                        // TODO how to do it elegantly without accessing via jQuery?
                        // TODO check performance as well, worst case complexity is O(N^2)
                        $('.problem-result' + '.solved-first' + '.problem-' + problem['id']).each(function() {
                            var teamIdOther = $(this).attr('data-team-id');
                            var problemStatOther = contest.getTeamStatus(teamIdOther).getProblemStatus(problem);
                            // TODO remove this business logic into somewhere proper (e.g. contest.coffee)
                            if(problemStatOther.getSolvedTime() != solvedFirstTime)
                                $(this).removeClass('solved-first');
                        });
                    }
                }
            }
            else {

                if(problemStat.isPending())
                    $(this).addClass('pending');
                else if(problemStat.isFailed())
                    $(this).addClass('failed');
            }

            var sign = problemStat.isAccepted() ? "+" : "-";
            if(problemStat.getFailedAttempts() > 0)
                $(this).find('.problem-result-text').text(sign + problemStat.getFailedAttempts());
        });

        problemsNewlySolved.sort(function(p, q) {
            return p.getSolvedRun().getId() - q.getSolvedRun().getId();
        } );

        $.each(problemsNewlySolved, function(idx, problemStat) {
            if (Spotboard.config['show_balloons'])
                Spotboard.View.addBalloon($team, problemStat);
        } );

    };

    Spotboard.View.addBalloon = function($team, problemStat) {
        var $balloonHolder = $team.find('.balloons');
        var problem = problemStat.getProblem();
        $('<span></span>')
            .addClass('balloon')
            .addClass('problem-' + problem.getId())
            .attr('data-balloon', problem.toString())
            .attr('data-balloon-pos', 'down')
            .appendTo($balloonHolder);
    };


    Spotboard.View.updateSolvedCountVisibility = function() {
        var contest = Spotboard.contest,
            problems = contest.getProblems();
        var $teamlist = $('#team-list');

        $('.solved-count').removeClass('first last');
        for(var i = 0; i <= problems.length; ++ i) {
            var group = $teamlist.find('.team:not(.hidden).solved-' + i);
            if(!group.length) continue;
            group.first().find('.solved-count').text('' + i).addClass('first');
            group.last().find('.solved-count').addClass('last');
        }
    };

    Spotboard.View.setSearchFilter = function(filter_text) {
        Spotboard.View.search_filter = filter_text;
        Spotboard.View.search_page = 0;
        Spotboard.View.updateVisibility();
    };

    return Spotboard.View;

});

define('spotboard.animation',[
    'jquery',
    'spotboard',

    'spotboard.util',
    'spotboard.view'
],
function($, Spotboard) {

    Spotboard.Animation = {};
    // returns whether use animation or not. (true / false)
    var isUsingAnimation = function() {
        return (Spotboard.config['animation'] == true);
    };

    Spotboard.Animation.Focus = {
        on: function($team, options) {
            var $df = new $.Deferred();
            options = options || {};

            var useAnimation;
            if(options['useAnimation'] !== undefined) useAnimation = options['useAnimation'];
            else useAnimation = isUsingAnimation();

            if(Spotboard.Animation.Focus.has($team)) {
                // 이미 포커스가 있을 때 처리
                return $df.resolve('focused');
            }

            var fnComplete = function() {
                setTimeout(function(){ $df.resolve(); }, options.delay || 0);
            };

            // sticky 되어 있으면 푼다.
            $team.removeClass('sticky-top sticky-bottom');

            if(useAnimation && $team.is(':visible')) {
                $('html, body').animate({
                    scrollTop : $team.offset().top - window.innerHeight * 0.5
                }, {
                    duration: 300,
                    complete : fnComplete
                });
                $team.addClass('target');
            } else {
                //fnComplete();
                $df.resolve();
            }
            return $df.promise();
        },
        off: function($team) {
            if(!$team) $('.team.target').removeClass('target');
            else $team.removeClass('target');
        },
        has: function($team) {
            return $team.hasClass('target');
        }
    };

    /* 하나의 런을 변경하는 애니메이션 클래스 */
    Spotboard.Animation.UpdateRun = (function() {

        function RunUpdateAnimation(run, options) {
            this.targetRun = run;
            this.problemId = run.getProblem().getId();
            this.teamId = run.getTeam().getId();
            this.teamStat = Spotboard.contest.getTeamStatus(this.teamId);
            this.problemStat = this.teamStat.getProblemStatus(this.problemId);

            this.$team = $("#team-" + run.getTeam().getId());
            this.$box = this.$team.find(".problem-result.problem-" + this.problemId);

            this.flipAnimationEnabled = isUsingAnimation();

            options = options || {};
            this.setFlipSpeed(options.flipSpeed);
            this.setFocusDelay(options.focusDelay);
            this.setFlipAnimationEnabled(options.flipAnimationEnabled);

            this.teamFlippingProgressCallback = [];
        }
        $.extend(RunUpdateAnimation.prototype, {

            // flipping delay. TODO 일반적인 값을 지원하도록 바꿔야함
            setFlipSpeed : function(flipSpeed) {
                this.flipSpeed = flipSpeed || 700;
            },

            // 포커스 잡고 딜레이 몇 ms?
            setFocusDelay : function(focusDelay) {
                this.focusDelay = focusDelay || 200;
            },

            setFlipAnimationEnabled : function(flipAnimationEnabled) {
                if(flipAnimationEnabled === undefined)
                    flipAnimationEnabled = isUsingAnimation();
                this.flipAnimationEnabled = flipAnimationEnabled;
            },

            flip : function($el) {
                var $df = new $.Deferred();
                var flipSpeed = this.flipSpeed;
                if($el === undefined) $el = this.$box;

                var state = 1;
                var animationEventHandler = function(e) {
                    if(e) e.stopPropagation();

                    // step 1. (before)
                    if(state == 1) {
                        ++state;
                        $el
                            .addClass('flip-before');
                    }
                    // step 2. (med)
                    else if(state == 2) {
                        ++state;
                        $df.notify('flipped');
                        $el
                            .removeClass('flip-before').addClass('flip-after');
                    }
                    // step 3. (done)
                    else if(state == 3) {
                        ++state;
                        $el
                            .removeClass('flip-after')
                            .css('-webkit-animation-duration', '')
                            .unbind('webkitAnimationEnd');
                        $df.resolve('done');
                    }
                    else throw 'illegal state';
                };

                // 애니메이션이 비활성화된 상태(옵션 혹은 어워드 빨리감기)이거나,
                // 페이지나 검색조건 등으로 인해서 안 보이는 상태이면,
                // 애니메이션을 발생시키지 않고 바로 resolve 한다.
                // TODO 애내메이션이 실행되고 있는데 안보이게 되면 $df가 절대 끝나지 않음
                if(!this.flipAnimationEnabled || !$el.is(':visible')) {
                    // 주의 : 이 때 step phase 2를 생략하므로 $df.notify가 발생 안할 수 있다.
                    // .progress()로 notify 받으면 실행하는 '업데이트' 연산이 있을 수 있는데
                    // 이거 실행 안되면 스코어보드가 전체적으로 꼬이므로 주의해줘야 한다.
                    //
                    // 일단은 시작 전이니까 바로 resolve 할거므로 flipped 도 처리
                    return $df.notify('flipped').resolve('skip-animation');
                }

                $el
                    .bind('webkitAnimationEnd', animationEventHandler)    // much faster than setTimeout
                    .css('-webkit-animation-duration', flipSpeed + 'ms')
                    ;
                animationEventHandler.call($el);

                // 웹킷 계열이 아닌 브라우저에서는 애니메이션이 동작하지 않아
                // $df 가 끝나지 않으므로, workaround로 setTimeout을 걸어 이벤트를 트리거
                var isWebkit = 'webkitRequestAnimationFrame' in window;
                if(! isWebkit) {
                    setTimeout( function() { $el.trigger('webkitAnimationEnd'); }, flipSpeed );
                    setTimeout( function() { $el.trigger('webkitAnimationEnd'); }, flipSpeed * 2);
                }

                // HACK : 페이지 이동이나 검색조건 변화 등으로 DOM이 사라지면,
                // webkit animation end 이벤트가 발생하지 않아 $df가 끝나지 않는다 (멈춤).
                /*
                setTimeout( function() {
                    if($df.state() === 'pending') {
                        console.log(['Timeout (reject) : ', $df]);
                        $df.resolve('timeout');
                    }
                }, flipSpeed * 2.5);
                */

                return $df.promise();
            },

            addTeamFlippingProgress : function(fn) {
                this.teamFlippingProgressCallback.push(fn);
                return this;
            },

            /** @returns deffered */
            transformResult : function() {

                if(this.problemStat.isAccepted())        this.runEvent = 'solved';
                else if(this.problemStat.isPending())    this.runEvent = 'pending';
                else if(this.problemStat.isFailed())    this.runEvent = 'failed';
                var problem_id = this.$box.attr('class').split(" ")[1];
                // flip 하면서 색깔 클래스 바꾸고 내용 업데이트함
                return this.flip()
                    .progress( function() {
                        // update text and color
                        if(this.problemStat.getFailedAttempts() > 0) {
                            this.$box.find('.problem-result-text')
                                .text("-" + this.problemStat.getFailedAttempts());
                        }
                        // play sound effect
                        if(this.runEvent === 'solved'){
                            if(solved_problem[problem_id] === undefined){
                                if(Spotboard.config['sound_effects'])
                                    SE_first.play();
                                $("#quick-gif").css("display", "block");
                                setTimeout(() => {
                                    $("#quick-gif").css("display", "none");
                                }, 2000); // 3 秒後替換 (根據 GIF 的實際時長調整)
                                solved_problem[problem_id] = true;
                            }
                            else if(Spotboard.config['sound_effects'])
                                SE_oiiai.play();
                            $("#oiiai-gif").css("display", "block");
                            setTimeout(() => {
                                $("#oiiai-gif").css("display", "none");
                            }, 3000); // 3 秒後替換 (根據 GIF 的實際時長調整)
                        }
                        else if(this.runEvent === 'failed' && Spotboard.config['sound_effects'])
                            SE_bruh.play();
                        this.$box.removeClass('solved pending failed').addClass(this.runEvent);
                    }.bind(this));
            },

            run: function() {
                var $df = Spotboard.Animation.Focus.on(this.$team, {'focusDelay' : this.focusDelay, 'useAnimation' : this.flipAnimationEnabled})
                    .pipe( function() {
                        // 포커스가 끝나면 문제 상태 변화를 시작한다.
                        return this.transformResult();
                    }.bind(this))
                    .pipe( function() {
                        // 문제 상태 변화를 끝내고 나서, 팀 상태 업데이트
                        var $team = this.$team;

                        var task = function() {
                            Spotboard.View.updateTeamStatus($team);
                            $.each(this.teamFlippingProgressCallback, function(idx, fn) {
                                fn.apply(this);
                            });
                        }.bind(this);


                        if(this.runEvent === 'solved') {
                            // 맞았으면, 팀을 다시 flip 하고 업데이트 함
                            this.setFlipSpeed(700);
                            return this.flip($team).progress(task);
                        }
                        else {
                            // 틀렸으면 flip하지 않고 그냥 업데이트만 함
                            task();
                            return null;
                        }

                    }.bind(this))
                    .pipe( function() {
                        Spotboard.Animation.Focus.off(this.$team);
                        return new $.Deferred().resolve(this.runEvent);
                    }.bind(this));

                return $df;
            }
        });

        return RunUpdateAnimation;
    })();


    /* 팀을 UTU 하는 에니메이션 */
    Spotboard.Animation.MoveTeamUp = (function() {

        var teamHeight = 2; // TODO from scoreboard:css div.team[height]

        function TeamMoveUpdateAnimation(team, speedFunc, usingAnimation) {
            this.team = team;
            this.teamStatus = Spotboard.contest.getTeamStatus( team.getId() );
            this.usingAnimation = usingAnimation !== undefined ? usingAnimation : isUsingAnimation();
            this.speedFunc = speedFunc || function(cnt) {
                return Math.min(300 + (cnt - 1) * 50, 5000);
            };

            this.animationEnabled = isUsingAnimation();
        }

        $.extend(TeamMoveUpdateAnimation.prototype, {

            setAnimationEnabled : function(enabled) {
                if(enabled === undefined) enabled = true;
                this.animationEnabled = enabled;
            },

            run : function() {
                var $teams = $('#team-list > .team');
                var $team = $('#team-' + this.team.getId());
                Spotboard.Animation.Focus.on($team, {'useAnimation' : this.animationEnabled});

                var $df = new $.Deferred();
                $df.always(function() {
                    Spotboard.View.updateSolvedCountVisibility();
                    Spotboard.Animation.Focus.off($team);
                });

                var old_index = $teams.index( $team );
                var new_index = this.teamStatus.getRank() - 1;

                // climb_count : DOM 상으로 올라가야 하는 개수
                var climb_count = old_index - new_index;
                // visible_climb_count : '보여지는' 팀 DOM 기준으로 올라가야 하는 개수 (애니메이션용)
                var visible_climb_count = (function() {
                    // dependent on $teams, old_index, new_index
                    // 페이지/필터 등으로 인해 일부 팀들이 is(':visible') = false 일 수 있음을 감안한다.
                    // 밀리는 팀들 : { team $t | new_index <= $t.idx < old_index }
                    var c = 0;
                    $teams.each(function(idx, t) {
                        if(new_index <= idx && idx < old_index) {
//                            if($(t).is(':visible')) c++;
                            // .hidden 클래스가 없으면서도 display: none 일 수 있는데..
                            // :visible 셀렉터가 너무 느려서 이런 게 없다고 가정(약속)하고 ㄱㄱ
                            if(! $(t).hasClass('hidden')) c++;
                        }
                    }); // TODO 음 이 루프 약간 비효율적인것 같은데..
                    return c;

                })();
                var global_index = $team.index();

                // 에니메이션으로 위로 끌어올림
                var last_idx = -1;
                var swap_against = null;
                var animation_canceled = false;

                var onComplete = function() {
                    setTimeout( function() {
                        $df.resolve('done');
                    }, 200);
                };
                if(old_index == new_index)  {
                    // 올라갈 곳이 없으면 마무리 짓고 리턴
                    onComplete();
                    return $df;
                }

                var adjustTeamDomPosition = function() {
                    $team.detach();
                    $teams.css('top', '');
                    $teams.eq(global_index - climb_count).before($team);
                    $(Spotboard).trigger('teamPositionUpdated');
                };

                // no animation - 그냥 DOM 위치만 바꿈
                if(!this.animationEnabled || !$team.is(':visible')) {
                    adjustTeamDomPosition();
                    return $df.resolve('no-animation');
                }


                // 애니메이션이 실행될 시간 (climb_count에 따라 다름)
                var duration = this.speedFunc(visible_climb_count);
                $team.delay(200).animate( { top : '-' + (teamHeight * visible_climb_count) + 'em' }, {
                    duration: duration,
                    step : function(now, fx) {
                        var idx = global_index - 1 - Math.floor(-now / teamHeight);
                        if (last_idx != idx) {
                            for (var i = last_idx; i > idx; -- i) {
                                $teams.eq(i).css('top', teamHeight + 'em');
                            }
                            last_idx = idx;
                            swap_against = $teams.eq(idx);
                        }
                        var mod = (-now) % teamHeight;
                        if(swap_against) swap_against.css('top', mod + 'em');

                        // 팀이 화면 밖으로 넘어가면, 스탑
                        if(!animation_canceled && ($team.position().top + $team.height()) < window.scrollY) {
                            animation_canceled = true;
                            setTimeout( function() {
                                $team.stop(false, true);
                            }, 0);
                        }
                    },
                    complete : function() {
                        // DOM 위치를 껴넣음
                        adjustTeamDomPosition();

                        // 약 0.2초의 딜레이를 주고 마무리
                        onComplete();
                    }

                });

                return $df.promise();
            }
        });

        return TeamMoveUpdateAnimation;

    })();

    return Spotboard.Animation;
});

define('spotboard.notify',[
    'spotboard',

    'jquery',
    'contest',
],
function(Spotboard, $) {

    Spotboard.Notify = {};

    Spotboard.Notify.enabled = false;
    Spotboard.Notify.autoclose_delay = 7000;

    Spotboard.Notify.toggleNotification = function(elem) {
        if(!('Notification' in window)) {
            // not supported
            return false;
        }

        if(Notification.permission !== 'granted') {
            Notification.requestPermission();
            return Spotboard.Notify.enabled;
        }

        Spotboard.Notify.enabled = !(Spotboard.Notify.enabled);
        return Spotboard.Notify.enabled;
    };

    Spotboard.Notify.showRunNotification = function(run) {
        if(!run || !Spotboard.Notify.enabled) return false;

        // 맞은 런만 노티해줌
        if(run.isAccepted() == false)
            return false;

        var contest = Spotboard.contest,
            team = run.getTeam();
        var teamName = run.getTeam().getName(),
            problemName = run.getProblem().getTitle();

        var attempts = contest.getTeamStatus(team).getProblemStatus(run.getProblem()).getAttempts();
        var title = teamName + ' has solved ' + problemName + ' !';
        var body = 'Run ' + run.getId() + ' in ' + run.getTime() + ' min(s) with ' + attempts + ' attempts, \n'
            + 'New Rank : ' + contest.getTeamStatus(team).getRank();
        var balloonIcon = 'assets/balloons/' + run.getProblem().getColor() + '.png';

        var note = new Notification(title, {
            icon: balloonIcon,
            body: body
        });

        note.onclick = function() {
            window.focus();
            this.cancel();
        };

        // Auto hide Notification
        setTimeout(note.close.bind(note), Spotboard.Notify.autoclose_delay);
        return note;
    };

    $(Spotboard).bind('teamUpdated', function(e, run) {
        setTimeout(function() {
            Spotboard.Notify.showRunNotification(run);
        }, 10);
    });

    return Spotboard.Notify;

});

/*! jQuery UI - v1.9.2 - 2013-08-15
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js
* Copyright 2013 jQuery Foundation and other contributors Licensed MIT */

(function(e,t){function i(t,n){var r,i,o,u=t.nodeName.toLowerCase();return"area"===u?(r=t.parentNode,i=r.name,!t.href||!i||r.nodeName.toLowerCase()!=="map"?!1:(o=e("img[usemap=#"+i+"]")[0],!!o&&s(o))):(/input|select|textarea|button|object/.test(u)?!t.disabled:"a"===u?t.href||n:n)&&s(t)}function s(t){return e.expr.filters.visible(t)&&!e(t).parents().andSelf().filter(function(){return e.css(this,"visibility")==="hidden"}).length}var n=0,r=/^ui-id-\d+$/;e.ui=e.ui||{};if(e.ui.version)return;e.extend(e.ui,{version:"1.9.2",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({_focus:e.fn.focus,focus:function(t,n){return typeof t=="number"?this.each(function(){var r=this;setTimeout(function(){e(r).focus(),n&&n.call(r)},t)}):this._focus.apply(this,arguments)},scrollParent:function(){var t;return e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?t=this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):t=this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(n){if(n!==t)return this.css("zIndex",n);if(this.length){var r=e(this[0]),i,s;while(r.length&&r[0]!==document){i=r.css("position");if(i==="absolute"||i==="relative"||i==="fixed"){s=parseInt(r.css("zIndex"),10);if(!isNaN(s)&&s!==0)return s}r=r.parent()}}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++n)})},removeUniqueId:function(){return this.each(function(){r.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(n){return!!e.data(n,t)}}):function(t,n,r){return!!e.data(t,r[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var n=e.attr(t,"tabindex"),r=isNaN(n);return(r||n>=0)&&i(t,!r)}}),e(function(){var t=document.body,n=t.appendChild(n=document.createElement("div"));n.offsetHeight,e.extend(n.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),e.support.minHeight=n.offsetHeight===100,e.support.selectstart="onselectstart"in n,t.removeChild(n).style.display="none"}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(n,r){function u(t,n,r,s){return e.each(i,function(){n-=parseFloat(e.css(t,"padding"+this))||0,r&&(n-=parseFloat(e.css(t,"border"+this+"Width"))||0),s&&(n-=parseFloat(e.css(t,"margin"+this))||0)}),n}var i=r==="Width"?["Left","Right"]:["Top","Bottom"],s=r.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+r]=function(n){return n===t?o["inner"+r].call(this):this.each(function(){e(this).css(s,u(this,n)+"px")})},e.fn["outer"+r]=function(t,n){return typeof t!="number"?o["outer"+r].call(this,t):this.each(function(){e(this).css(s,u(this,t,!0,n)+"px")})}}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(n){return arguments.length?t.call(this,e.camelCase(n)):t.call(this)}}(e.fn.removeData)),function(){var t=/msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase())||[];e.ui.ie=t.length?!0:!1,e.ui.ie6=parseFloat(t[1],10)===6}(),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,n,r){var i,s=e.ui[t].prototype;for(i in r)s.plugins[i]=s.plugins[i]||[],s.plugins[i].push([n,r[i]])},call:function(e,t,n){var r,i=e.plugins[t];if(!i||!e.element[0].parentNode||e.element[0].parentNode.nodeType===11)return;for(r=0;r<i.length;r++)e.options[i[r][0]]&&i[r][1].apply(e.element,n)}},contains:e.contains,hasScroll:function(t,n){if(e(t).css("overflow")==="hidden")return!1;var r=n&&n==="left"?"scrollLeft":"scrollTop",i=!1;return t[r]>0?!0:(t[r]=1,i=t[r]>0,t[r]=0,i)},isOverAxis:function(e,t,n){return e>t&&e<t+n},isOver:function(t,n,r,i,s,o){return e.ui.isOverAxis(t,r,s)&&e.ui.isOverAxis(n,i,o)}})})(jQuery);
(function(e,t){var n=0,r=Array.prototype.slice,i=e.cleanData;e.cleanData=function(t){for(var n=0,r;(r=t[n])!=null;n++)try{e(r).triggerHandler("remove")}catch(s){}i(t)},e.widget=function(t,n,r){var i,s,o,u,a=t.split(".")[0];t=t.split(".")[1],i=a+"-"+t,r||(r=n,n=e.Widget),e.expr[":"][i.toLowerCase()]=function(t){return!!e.data(t,i)},e[a]=e[a]||{},s=e[a][t],o=e[a][t]=function(e,t){if(!this._createWidget)return new o(e,t);arguments.length&&this._createWidget(e,t)},e.extend(o,s,{version:r.version,_proto:e.extend({},r),_childConstructors:[]}),u=new n,u.options=e.widget.extend({},u.options),e.each(r,function(t,i){e.isFunction(i)&&(r[t]=function(){var e=function(){return n.prototype[t].apply(this,arguments)},r=function(e){return n.prototype[t].apply(this,e)};return function(){var t=this._super,n=this._superApply,s;return this._super=e,this._superApply=r,s=i.apply(this,arguments),this._super=t,this._superApply=n,s}}())}),o.prototype=e.widget.extend(u,{widgetEventPrefix:s?u.widgetEventPrefix:t},r,{constructor:o,namespace:a,widgetName:t,widgetBaseClass:i,widgetFullName:i}),s?(e.each(s._childConstructors,function(t,n){var r=n.prototype;e.widget(r.namespace+"."+r.widgetName,o,n._proto)}),delete s._childConstructors):n._childConstructors.push(o),e.widget.bridge(t,o)},e.widget.extend=function(n){var i=r.call(arguments,1),s=0,o=i.length,u,a;for(;s<o;s++)for(u in i[s])a=i[s][u],i[s].hasOwnProperty(u)&&a!==t&&(e.isPlainObject(a)?n[u]=e.isPlainObject(n[u])?e.widget.extend({},n[u],a):e.widget.extend({},a):n[u]=a);return n},e.widget.bridge=function(n,i){var s=i.prototype.widgetFullName||n;e.fn[n]=function(o){var u=typeof o=="string",a=r.call(arguments,1),f=this;return o=!u&&a.length?e.widget.extend.apply(null,[o].concat(a)):o,u?this.each(function(){var r,i=e.data(this,s);if(!i)return e.error("cannot call methods on "+n+" prior to initialization; "+"attempted to call method '"+o+"'");if(!e.isFunction(i[o])||o.charAt(0)==="_")return e.error("no such method '"+o+"' for "+n+" widget instance");r=i[o].apply(i,a);if(r!==i&&r!==t)return f=r&&r.jquery?f.pushStack(r.get()):r,!1}):this.each(function(){var t=e.data(this,s);t?t.option(o||{})._init():e.data(this,s,new i(o,this))}),f}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,r){r=e(r||this.defaultElement||this)[0],this.element=e(r),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),r!==this&&(e.data(r,this.widgetName,this),e.data(r,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===r&&this.destroy()}}),this.document=e(r.style?r.ownerDocument:r.document||r),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(n,r){var i=n,s,o,u;if(arguments.length===0)return e.widget.extend({},this.options);if(typeof n=="string"){i={},s=n.split("."),n=s.shift();if(s.length){o=i[n]=e.widget.extend({},this.options[n]);for(u=0;u<s.length-1;u++)o[s[u]]=o[s[u]]||{},o=o[s[u]];n=s.pop();if(r===t)return o[n]===t?null:o[n];o[n]=r}else{if(r===t)return this.options[n]===t?null:this.options[n];i[n]=r}}return this._setOptions(i),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,e==="disabled"&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(t,n,r){var i,s=this;typeof t!="boolean"&&(r=n,n=t,t=!1),r?(n=i=e(n),this.bindings=this.bindings.add(n)):(r=n,n=this.element,i=this.widget()),e.each(r,function(r,o){function u(){if(!t&&(s.options.disabled===!0||e(this).hasClass("ui-state-disabled")))return;return(typeof o=="string"?s[o]:o).apply(s,arguments)}typeof o!="string"&&(u.guid=o.guid=o.guid||u.guid||e.guid++);var a=r.match(/^(\w+)\s*(.*)$/),f=a[1]+s.eventNamespace,l=a[2];l?i.delegate(l,f,u):n.bind(f,u)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function n(){return(typeof e=="string"?r[e]:e).apply(r,arguments)}var r=this;return setTimeout(n,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,n,r){var i,s,o=this.options[t];r=r||{},n=e.Event(n),n.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],s=n.originalEvent;if(s)for(i in s)i in n||(n[i]=s[i]);return this.element.trigger(n,r),!(e.isFunction(o)&&o.apply(this.element[0],[n].concat(r))===!1||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,n){e.Widget.prototype["_"+t]=function(r,i,s){typeof i=="string"&&(i={effect:i});var o,u=i?i===!0||typeof i=="number"?n:i.effect||n:t;i=i||{},typeof i=="number"&&(i={duration:i}),o=!e.isEmptyObject(i),i.complete=s,i.delay&&r.delay(i.delay),o&&e.effects&&(e.effects.effect[u]||e.uiBackCompat!==!1&&e.effects[u])?r[t](i):u!==t&&r[u]?r[u](i.duration,i.easing,s):r.queue(function(n){e(this)[t](),s&&s.call(r[0]),n()})}}),e.uiBackCompat!==!1&&(e.Widget.prototype._getCreateOptions=function(){return e.metadata&&e.metadata.get(this.element[0])[this.widgetName]})})(jQuery);
(function(e,t){var n=!1;e(document).mouseup(function(e){n=!1}),e.widget("ui.mouse",{version:"1.9.2",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(n){if(!0===e.data(n.target,t.widgetName+".preventClickEvent"))return e.removeData(n.target,t.widgetName+".preventClickEvent"),n.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(n)return;this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var r=this,i=t.which===1,s=typeof this.options.cancel=="string"&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;if(!i||s||!this._mouseCapture(t))return!0;this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){r.mouseDelayMet=!0},this.options.delay));if(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)){this._mouseStarted=this._mouseStart(t)!==!1;if(!this._mouseStarted)return t.preventDefault(),!0}return!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return r._mouseMove(e)},this._mouseUpDelegate=function(e){return r._mouseUp(e)},e(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),n=!0,!0},_mouseMove:function(t){return!e.ui.ie||document.documentMode>=9||!!t.button?this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted):this._mouseUp(t)},_mouseUp:function(t){return e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(e){return this.mouseDelayMet},_mouseStart:function(e){},_mouseDrag:function(e){},_mouseStop:function(e){},_mouseCapture:function(e){return!0}})})(jQuery);
(function(e,t){e.widget("ui.draggable",e.ui.mouse,{version:"1.9.2",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1},_create:function(){this.options.helper=="original"&&!/^(?:r|a|f)/.test(this.element.css("position"))&&(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(t){var n=this.options;return this.helper||n.disabled||e(t.target).is(".ui-resizable-handle")?!1:(this.handle=this._getHandle(t),this.handle?(e(n.iframeFix===!0?"iframe":n.iframeFix).each(function(){e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(e(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(t){var n=this.options;return this.helper=this._createHelper(t),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,n.cursorAt&&this._adjustOffsetFromHelper(n.cursorAt),n.containment&&this._setContainment(),this._trigger("start",t)===!1?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_mouseDrag:function(t,n){this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute");if(!n){var r=this._uiHash();if(this._trigger("drag",t,r)===!1)return this._mouseUp({}),!1;this.position=r.position}if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";return e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var n=!1;e.ui.ddmanager&&!this.options.dropBehaviour&&(n=e.ui.ddmanager.drop(this,t)),this.dropped&&(n=this.dropped,this.dropped=!1);var r=this.element[0],i=!1;while(r&&(r=r.parentNode))r==document&&(i=!0);if(!i&&this.options.helper==="original")return!1;if(this.options.revert=="invalid"&&!n||this.options.revert=="valid"&&n||this.options.revert===!0||e.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)){var s=this;e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){s._trigger("stop",t)!==!1&&s._clear()})}else this._trigger("stop",t)!==!1&&this._clear();return!1},_mouseUp:function(t){return e("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(t){var n=!this.options.handle||!e(this.options.handle,this.element).length?!0:!1;return e(this.options.handle,this.element).find("*").andSelf().each(function(){this==t.target&&(n=!0)}),n},_createHelper:function(t){var n=this.options,r=e.isFunction(n.helper)?e(n.helper.apply(this.element[0],[t])):n.helper=="clone"?this.element.clone().removeAttr("id"):this.element;return r.parents("body").length||r.appendTo(n.appendTo=="parent"?this.element[0].parentNode:n.appendTo),r[0]!=this.element[0]&&!/(fixed|absolute)/.test(r.css("position"))&&r.css("position","absolute"),r},_adjustOffsetFromHelper:function(t){typeof t=="string"&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop());if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&e.ui.ie)t={top:0,left:0};return{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var e=this.element.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t=this.options;t.containment=="parent"&&(t.containment=this.helper[0].parentNode);if(t.containment=="document"||t.containment=="window")this.containment=[t.containment=="document"?0:e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t.containment=="document"?0:e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,(t.containment=="document"?0:e(window).scrollLeft())+e(t.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(t.containment=="document"?0:e(window).scrollTop())+(e(t.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(t.containment)&&t.containment.constructor!=Array){var n=e(t.containment),r=n[0];if(!r)return;var i=n.offset(),s=e(r).css("overflow")!="hidden";this.containment=[(parseInt(e(r).css("borderLeftWidth"),10)||0)+(parseInt(e(r).css("paddingLeft"),10)||0),(parseInt(e(r).css("borderTopWidth"),10)||0)+(parseInt(e(r).css("paddingTop"),10)||0),(s?Math.max(r.scrollWidth,r.offsetWidth):r.offsetWidth)-(parseInt(e(r).css("borderLeftWidth"),10)||0)-(parseInt(e(r).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(s?Math.max(r.scrollHeight,r.offsetHeight):r.offsetHeight)-(parseInt(e(r).css("borderTopWidth"),10)||0)-(parseInt(e(r).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=n}else t.containment.constructor==Array&&(this.containment=t.containment)},_convertPositionTo:function(t,n){n||(n=this.position);var r=t=="absolute"?1:-1,i=this.options,s=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(s[0].tagName);return{top:n.top+this.offset.relative.top*r+this.offset.parent.top*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():o?0:s.scrollTop())*r,left:n.left+this.offset.relative.left*r+this.offset.parent.left*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():o?0:s.scrollLeft())*r}},_generatePosition:function(t){var n=this.options,r=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,i=/(html|body)/i.test(r[0].tagName),s=t.pageX,o=t.pageY;if(this.originalPosition){var u;if(this.containment){if(this.relative_container){var a=this.relative_container.offset();u=[this.containment[0]+a.left,this.containment[1]+a.top,this.containment[2]+a.left,this.containment[3]+a.top]}else u=this.containment;t.pageX-this.offset.click.left<u[0]&&(s=u[0]+this.offset.click.left),t.pageY-this.offset.click.top<u[1]&&(o=u[1]+this.offset.click.top),t.pageX-this.offset.click.left>u[2]&&(s=u[2]+this.offset.click.left),t.pageY-this.offset.click.top>u[3]&&(o=u[3]+this.offset.click.top)}if(n.grid){var f=n.grid[1]?this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1]:this.originalPageY;o=u?f-this.offset.click.top<u[1]||f-this.offset.click.top>u[3]?f-this.offset.click.top<u[1]?f+n.grid[1]:f-n.grid[1]:f:f;var l=n.grid[0]?this.originalPageX+Math.round((s-this.originalPageX)/n.grid[0])*n.grid[0]:this.originalPageX;s=u?l-this.offset.click.left<u[0]||l-this.offset.click.left>u[2]?l-this.offset.click.left<u[0]?l+n.grid[0]:l-n.grid[0]:l:l}}return{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():i?0:r.scrollTop()),left:s-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():i?0:r.scrollLeft())}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]!=this.element[0]&&!this.cancelHelperRemoval&&this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(t,n,r){return r=r||this._uiHash(),e.ui.plugin.call(this,t,[n,r]),t=="drag"&&(this.positionAbs=this._convertPositionTo("absolute")),e.Widget.prototype._trigger.call(this,t,n,r)},plugins:{},_uiHash:function(e){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,n){var r=e(this).data("draggable"),i=r.options,s=e.extend({},n,{item:r.element});r.sortables=[],e(i.connectToSortable).each(function(){var n=e.data(this,"sortable");n&&!n.options.disabled&&(r.sortables.push({instance:n,shouldRevert:n.options.revert}),n.refreshPositions(),n._trigger("activate",t,s))})},stop:function(t,n){var r=e(this).data("draggable"),i=e.extend({},n,{item:r.element});e.each(r.sortables,function(){this.instance.isOver?(this.instance.isOver=0,r.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=!0),this.instance._mouseStop(t),this.instance.options.helper=this.instance.options._helper,r.options.helper=="original"&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",t,i))})},drag:function(t,n){var r=e(this).data("draggable"),i=this,s=function(t){var n=this.offset.click.top,r=this.offset.click.left,i=this.positionAbs.top,s=this.positionAbs.left,o=t.height,u=t.width,a=t.top,f=t.left;return e.ui.isOver(i+n,s+r,a,f,o,u)};e.each(r.sortables,function(s){var o=!1,u=this;this.instance.positionAbs=r.positionAbs,this.instance.helperProportions=r.helperProportions,this.instance.offset.click=r.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(o=!0,e.each(r.sortables,function(){return this.instance.positionAbs=r.positionAbs,this.instance.helperProportions=r.helperProportions,this.instance.offset.click=r.offset.click,this!=u&&this.instance._intersectsWith(this.instance.containerCache)&&e.ui.contains(u.instance.element[0],this.instance.element[0])&&(o=!1),o})),o?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=e(i).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return n.helper[0]},t.target=this.instance.currentItem[0],this.instance._mouseCapture(t,!0),this.instance._mouseStart(t,!0,!0),this.instance.offset.click.top=r.offset.click.top,this.instance.offset.click.left=r.offset.click.left,this.instance.offset.parent.left-=r.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=r.offset.parent.top-this.instance.offset.parent.top,r._trigger("toSortable",t),r.dropped=this.instance.element,r.currentItem=r.element,this.instance.fromOutside=r),this.instance.currentItem&&this.instance._mouseDrag(t)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",t,this.instance._uiHash(this.instance)),this.instance._mouseStop(t,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),r._trigger("fromSortable",t),r.dropped=!1)})}}),e.ui.plugin.add("draggable","cursor",{start:function(t,n){var r=e("body"),i=e(this).data("draggable").options;r.css("cursor")&&(i._cursor=r.css("cursor")),r.css("cursor",i.cursor)},stop:function(t,n){var r=e(this).data("draggable").options;r._cursor&&e("body").css("cursor",r._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,n){var r=e(n.helper),i=e(this).data("draggable").options;r.css("opacity")&&(i._opacity=r.css("opacity")),r.css("opacity",i.opacity)},stop:function(t,n){var r=e(this).data("draggable").options;r._opacity&&e(n.helper).css("opacity",r._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(t,n){var r=e(this).data("draggable");r.scrollParent[0]!=document&&r.scrollParent[0].tagName!="HTML"&&(r.overflowOffset=r.scrollParent.offset())},drag:function(t,n){var r=e(this).data("draggable"),i=r.options,s=!1;if(r.scrollParent[0]!=document&&r.scrollParent[0].tagName!="HTML"){if(!i.axis||i.axis!="x")r.overflowOffset.top+r.scrollParent[0].offsetHeight-t.pageY<i.scrollSensitivity?r.scrollParent[0].scrollTop=s=r.scrollParent[0].scrollTop+i.scrollSpeed:t.pageY-r.overflowOffset.top<i.scrollSensitivity&&(r.scrollParent[0].scrollTop=s=r.scrollParent[0].scrollTop-i.scrollSpeed);if(!i.axis||i.axis!="y")r.overflowOffset.left+r.scrollParent[0].offsetWidth-t.pageX<i.scrollSensitivity?r.scrollParent[0].scrollLeft=s=r.scrollParent[0].scrollLeft+i.scrollSpeed:t.pageX-r.overflowOffset.left<i.scrollSensitivity&&(r.scrollParent[0].scrollLeft=s=r.scrollParent[0].scrollLeft-i.scrollSpeed)}else{if(!i.axis||i.axis!="x")t.pageY-e(document).scrollTop()<i.scrollSensitivity?s=e(document).scrollTop(e(document).scrollTop()-i.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<i.scrollSensitivity&&(s=e(document).scrollTop(e(document).scrollTop()+i.scrollSpeed));if(!i.axis||i.axis!="y")t.pageX-e(document).scrollLeft()<i.scrollSensitivity?s=e(document).scrollLeft(e(document).scrollLeft()-i.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<i.scrollSensitivity&&(s=e(document).scrollLeft(e(document).scrollLeft()+i.scrollSpeed))}s!==!1&&e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(r,t)}}),e.ui.plugin.add("draggable","snap",{start:function(t,n){var r=e(this).data("draggable"),i=r.options;r.snapElements=[],e(i.snap.constructor!=String?i.snap.items||":data(draggable)":i.snap).each(function(){var t=e(this),n=t.offset();this!=r.element[0]&&r.snapElements.push({item:this,width:t.outerWidth(),height:t.outerHeight(),top:n.top,left:n.left})})},drag:function(t,n){var r=e(this).data("draggable"),i=r.options,s=i.snapTolerance,o=n.offset.left,u=o+r.helperProportions.width,a=n.offset.top,f=a+r.helperProportions.height;for(var l=r.snapElements.length-1;l>=0;l--){var c=r.snapElements[l].left,h=c+r.snapElements[l].width,p=r.snapElements[l].top,d=p+r.snapElements[l].height;if(!(c-s<o&&o<h+s&&p-s<a&&a<d+s||c-s<o&&o<h+s&&p-s<f&&f<d+s||c-s<u&&u<h+s&&p-s<a&&a<d+s||c-s<u&&u<h+s&&p-s<f&&f<d+s)){r.snapElements[l].snapping&&r.options.snap.release&&r.options.snap.release.call(r.element,t,e.extend(r._uiHash(),{snapItem:r.snapElements[l].item})),r.snapElements[l].snapping=!1;continue}if(i.snapMode!="inner"){var v=Math.abs(p-f)<=s,m=Math.abs(d-a)<=s,g=Math.abs(c-u)<=s,y=Math.abs(h-o)<=s;v&&(n.position.top=r._convertPositionTo("relative",{top:p-r.helperProportions.height,left:0}).top-r.margins.top),m&&(n.position.top=r._convertPositionTo("relative",{top:d,left:0}).top-r.margins.top),g&&(n.position.left=r._convertPositionTo("relative",{top:0,left:c-r.helperProportions.width}).left-r.margins.left),y&&(n.position.left=r._convertPositionTo("relative",{top:0,left:h}).left-r.margins.left)}var b=v||m||g||y;if(i.snapMode!="outer"){var v=Math.abs(p-a)<=s,m=Math.abs(d-f)<=s,g=Math.abs(c-o)<=s,y=Math.abs(h-u)<=s;v&&(n.position.top=r._convertPositionTo("relative",{top:p,left:0}).top-r.margins.top),m&&(n.position.top=r._convertPositionTo("relative",{top:d-r.helperProportions.height,left:0}).top-r.margins.top),g&&(n.position.left=r._convertPositionTo("relative",{top:0,left:c}).left-r.margins.left),y&&(n.position.left=r._convertPositionTo("relative",{top:0,left:h-r.helperProportions.width}).left-r.margins.left)}!r.snapElements[l].snapping&&(v||m||g||y||b)&&r.options.snap.snap&&r.options.snap.snap.call(r.element,t,e.extend(r._uiHash(),{snapItem:r.snapElements[l].item})),r.snapElements[l].snapping=v||m||g||y||b}}}),e.ui.plugin.add("draggable","stack",{start:function(t,n){var r=e(this).data("draggable").options,i=e.makeArray(e(r.stack)).sort(function(t,n){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(n).css("zIndex"),10)||0)});if(!i.length)return;var s=parseInt(i[0].style.zIndex)||0;e(i).each(function(e){this.style.zIndex=s+e}),this[0].style.zIndex=s+i.length}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,n){var r=e(n.helper),i=e(this).data("draggable").options;r.css("zIndex")&&(i._zIndex=r.css("zIndex")),r.css("zIndex",i.zIndex)},stop:function(t,n){var r=e(this).data("draggable").options;r._zIndex&&e(n.helper).css("zIndex",r._zIndex)}})})(jQuery);

/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version: 1.2.0
 *
 */
(function(e){jQuery.fn.extend({slimScroll:function(h){var a=e.extend({width:"auto",height:"250px",size:"7px",color:"#000",position:"right",distance:"1px",start:"top",opacity:0.4,alwaysVisible:!1,disableFadeOut:!1,railVisible:!1,railColor:"#333",railOpacity:0.2,railDraggable:!0,railClass:"slimScrollRail",barClass:"slimScrollBar",wrapperClass:"slimScrollDiv",allowPageScroll:!1,wheelStep:20,touchScrollStep:200},h);this.each(function(){function s(d){if(q){d=d||window.event;var c=0;d.wheelDelta&&(c=-d.wheelDelta/
120);d.detail&&(c=d.detail/3);e(d.target||d.srcTarget||d.srcElement).closest("."+a.wrapperClass).is(b.parent())&&k(c,!0);d.preventDefault&&!m&&d.preventDefault();m||(d.returnValue=!1)}}function k(d,e,h){var f=d,g=b.outerHeight()-c.outerHeight();e&&(f=parseInt(c.css("top"))+d*parseInt(a.wheelStep)/100*c.outerHeight(),f=Math.min(Math.max(f,0),g),f=0<d?Math.ceil(f):Math.floor(f),c.css({top:f+"px"}));j=parseInt(c.css("top"))/(b.outerHeight()-c.outerHeight());f=j*(b[0].scrollHeight-b.outerHeight());h&&
(f=d,d=f/b[0].scrollHeight*b.outerHeight(),d=Math.min(Math.max(d,0),g),c.css({top:d+"px"}));b.scrollTop(f);b.trigger("slimscrolling",~~f);t();n()}function A(){window.addEventListener?(this.addEventListener("DOMMouseScroll",s,!1),this.addEventListener("mousewheel",s,!1)):document.attachEvent("onmousewheel",s)}function u(){r=Math.max(b.outerHeight()/b[0].scrollHeight*b.outerHeight(),B);c.css({height:r+"px"});var a=r==b.outerHeight()?"none":"block";c.css({display:a})}function t(){u();clearTimeout(x);
j==~~j?(m=a.allowPageScroll,y!=j&&b.trigger("slimscroll",0==~~j?"top":"bottom")):m=!1;y=j;r>=b.outerHeight()?m=!0:(c.stop(!0,!0).fadeIn("fast"),a.railVisible&&g.stop(!0,!0).fadeIn("fast"))}function n(){a.alwaysVisible||(x=setTimeout(function(){if((!a.disableFadeOut||!q)&&!v&&!w)c.fadeOut("slow"),g.fadeOut("slow")},1E3))}var q,v,w,x,z,r,j,y,B=30,m=!1,b=e(this);if(b.parent().hasClass(a.wrapperClass)){var l=b.scrollTop(),c=b.parent().find("."+a.barClass),g=b.parent().find("."+a.railClass);u();if(e.isPlainObject(h)){if("height"in
h&&"auto"==h.height){b.parent().css("height","auto");b.css("height","auto");var p=b.parent().parent().height();b.parent().css("height",p);b.css("height",p)}if("scrollTo"in h)l=parseInt(a.scrollTo);else if("scrollBy"in h)l+=parseInt(a.scrollBy);else if("destroy"in h){c.remove();g.remove();b.unwrap();return}k(l,!1,!0)}}else{a.height="auto"==a.height?b.parent().height():a.height;l=e("<div></div>").addClass(a.wrapperClass).css({position:"relative",overflow:"hidden",width:a.width,height:a.height});b.css({overflow:"hidden",
width:a.width,height:a.height});var g=e("<div></div>").addClass(a.railClass).css({width:a.size,height:"100%",position:"absolute",top:0,display:a.alwaysVisible&&a.railVisible?"block":"none","border-radius":a.size,background:a.railColor,opacity:a.railOpacity,zIndex:90}),c=e("<div></div>").addClass(a.barClass).css({background:a.color,width:a.size,position:"absolute",top:0,opacity:a.opacity,display:a.alwaysVisible?"block":"none","border-radius":a.size,BorderRadius:a.size,MozBorderRadius:a.size,WebkitBorderRadius:a.size,
zIndex:99}),p="right"==a.position?{right:a.distance}:{left:a.distance};g.css(p);c.css(p);b.wrap(l);b.parent().append(c);b.parent().append(g);a.railDraggable&&(e.ui&&"function"==typeof e.ui.draggable)&&c.draggable({axis:"y",containment:"parent",start:function(){w=!0},stop:function(){w=!1;n()},drag:function(){k(0,e(this).position().top,!1)}});g.hover(function(){t()},function(){n()});c.hover(function(){v=!0},function(){v=!1});b.hover(function(){q=!0;t();n()},function(){q=!1;n()});b.bind("touchstart",
function(a){a.originalEvent.touches.length&&(z=a.originalEvent.touches[0].pageY)});b.bind("touchmove",function(b){b.originalEvent.preventDefault();b.originalEvent.touches.length&&k((z-b.originalEvent.touches[0].pageY)/a.touchScrollStep,!0)});"bottom"===a.start?(c.css({top:b.outerHeight()-c.outerHeight()}),k(0,!0)):"top"!==a.start&&(k(e(a.start).position().top,null,!0),a.alwaysVisible||c.hide());A();u()}});return this}});jQuery.fn.extend({slimscroll:jQuery.fn.slimScroll})})(jQuery);

define("jquery.slimscroll", ["jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.jQuery.fn.slimScroll;
    };
}(this)));

define('spotboard.dashboard',[
    'jquery',
    'spotboard',

    'spotboard.util',
    'jquery.slimscroll',
    'handlebars'
],
function($, Spotboard) {

    var localStorage = window['localStorage'] || {};

    Spotboard.Dashboard = {};
    if(typeof localStorage['spotboard.dashboard'] === 'undefined')
        localStorage['spotboard.dashboard'] = Spotboard.config['show_events'];

    // 대쉬보드에 최대로 보여질 notification의 개수 (넘으면 짜름)
    Spotboard.Dashboard.maxNotifications = Spotboard.config['max_notifications'] || 100;

    Spotboard.Dashboard.isDisplayed = function() {
        return (localStorage['spotboard.dashboard'] == 'true');
    };

    Spotboard.Dashboard.display = function() {
        localStorage['spotboard.dashboard'] = true;
        $("#wrapper").addClass('dashboard');
    };
    Spotboard.Dashboard.hide = function() {
        localStorage['spotboard.dashboard'] = false;
        $("#wrapper").removeClass('dashboard');
    };
    Spotboard.Dashboard.toggle = function(elem) {
        if(this.isDisplayed()) this.hide();
        else this.display();
    };

    if(Spotboard.Dashboard.isDisplayed())
        Spotboard.Dashboard.display();
    else Spotboard.Dashboard.hide();

    // template
    Spotboard.JST['team-run-event'] = Handlebars.compile('\
                <li class="run {{status}}" data-runid="{{runId}}">\
                    <div class="balloon problem-{{problemId}}"></div>\
                    Team <span class="team">{{teamName}}</span>\
                    {{teamDisplayAction}}\
                    <span class="problem">{{problemName}}</span>!\
                    ({{minute}} min.)\
                </li>\
'.trim());

    Spotboard.Dashboard.createRunNotification = function(run) {
        if(!run) return null;

        // 일단 맞거나 틀리거나 낸거나 모두 다 표시해줌
        var contest = Spotboard.contest,
            team = run.getTeam();
        var teamName = run.getTeam().getName(),
            problemName = run.getProblem().getName();

        var status, judgeStatus, teamDisplayAction;
        if(run.isJudgedYes()) {
            status = 'accepted';
            teamDisplayAction = 'got <span class="status">YES</span> on';
        }
        else if(run.isPending()) {
            status = 'pending';
            teamDisplayAction = 'has submitted';
        }
        else {
            status = 'failed';
            teamDisplayAction = 'got <span class="status">NO</span> on';
        }

        var $dashboardUl = $('#dashboard ul.runs');
        var $prevNoty = $dashboardUl.find('> li[data-runid=' + run.getId() + ']');

        if($prevNoty.length) {
            // 이미 있음 : 에니메이션으로 삭제함
            setTimeout( function() {
                $prevNoty
                    .slideUp('fast', function() { $(this).remove(); })
                    .animate({'opacity' : 0}, {'queue' : false, 'duration' : 'fast'});
            }, 500);
        }

        var $noty = $(Spotboard.JST['team-run-event']({
            'status' : status,
            'teamDisplayAction' : new Handlebars.SafeString(teamDisplayAction),
            'runId' : run.getId(),
            'problemId' : run.getProblem().getId(),
            'problemName' : problemName,
            'teamName' : teamName,
            'minute' : run.getTime()
        }));
        return $noty;
    };

    Spotboard.Dashboard.drawAllRunNotification = function() {
        var contest = Spotboard.contest,
            runs = contest.getRuns();

        // 기존에 있던는 업데이트하고 없는거만 그리면 좋겠지만
        // 일단 무식하게 다 날리고[..] 현재 알려진 모든 run을 새로 그림.
        var $dashboardUl = $('#dashboard ul.runs');
        $dashboardUl.empty();

        // runId keys (in reverse order)
        var keys = [];
        for(var runId in runs) keys.unshift(runId);
        for(var i = 0; i < keys.length && i < Spotboard.Dashboard.maxNotifications; ++ i) {
            var runId = keys[i],
                run = runs[runId];

            var $noty = this.createRunNotification(run);
            $noty.appendTo($dashboardUl);
        }
    };

    Spotboard.Dashboard.showRunNotification = function(run) {
        var $noty = this.createRunNotification(run);
        if(!$noty) return false;

        // 애니메이션 : fade in & slide down
        $noty.hide().prependTo($('#dashboard ul.runs'))
            .css('opacity', 0)
            .slideDown().animate({'opacity' : 1}, {'queue': false, 'duration' : 'slow'});

        Spotboard.Dashboard.cutOffIfExcessive();
    };


    // notification이 특정 개수를 넘어가면 자른다.
    Spotboard.Dashboard.cutOffIfExcessive = function() {
        var $notyItems = $('#dashboard ul.runs > li');

        Spotboard.Dashboard.maxNotifications = parseInt(Spotboard.Dashboard.maxNotifications);
        if($notyItems.length > Spotboard.Dashboard.maxNotifications) {
            $notyItems.filter(':gt(' + Spotboard.Dashboard.maxNotifications + ')').remove();

            // 더보기 여기까지라는 느낌의 UI를 추가함
            $('#dashboard ul.runs').append($('<li class="run center">No More Information</li>'));
            return true;
        }

        return false;
    };


    $(Spotboard).bind('teamUpdated', function(e, run) {
        setTimeout(function() {
            Spotboard.Dashboard.showRunNotification(run);
        }, 10);
    });

    $("#dashboard #events-filter").click(function() {
        var $d = $("#dashboard");
        var filter = $d.attr('data-filter');
        if('yes' === filter) filter = '';
        else filter = 'yes';
        $d.attr('data-filter', filter);
    });

    $(document).ready(function() {
        $('#dashboard > ul.runs').slimScroll({
            'allowPageScroll' : false,
            'position' : 'left',
            'height' : '100%'
        });
    });

    return Spotboard.Dashboard;

});

define('spotboard.award',[
    'jquery',
    'spotboard',

    'spotboard.view',
    'spotboard.util',
    'spotboard.animation',
    'handlebars'
],
function($, Spotboard) {

    Spotboard.Award = {};

    /**
     * award focus 할 다음 팀을 고름.
     *
     * @return $team jQuery object. 이미 끝났으면 null
     */
    Spotboard.Award.getNextTeam = function() {
        // 가장 밑에 있는 국내팀 - 다음 해외팀
        // TODO 여기서 dom manipulation 안하게 못하나 ㅜㅜ)
        var $domestic_teams = $("div.team:not(.finalized):not(.foreign)");
        var $foreign_teams = $("div.team:not(.finalized).foreign");
        var $team;
        if ($domestic_teams.length != 0)
            $team = $domestic_teams.last();
        else
            $team = $foreign_teams.last();

        if($team.length == 0) {
            return null;
        }
        return $team;
    };

    /**
     * 현재 focus된 팀 $team에서 다음으로 공개할 문제를 고름.
     *
     * @return (pending 상태인) $problem-result jQuery object. 현재 팀에서 더 없으면 null.
     *
     */
    Spotboard.Award.getNextPendingToShow = function($team) {
        var $pending = $team.find(".problem-result.pending");
        if($pending.length == 0)
            return null;

        Spotboard.Award.revealPriority = Spotboard.Award.revealPriority || (function() {
            var contest = Spotboard.contest,
                problems = contest.getProblems();
            var order = Spotboard.config['award_reveal_order'] || [];
            var priority = new Array(contest.getProblems().length);

            // construct a dict from (problem title) -> id,
            // e.g. {'A' : 1, 'B' : 2, ...}
            var problemToId = {};
            for(var i = 0; i < problems.length; ++ i) {
                var problemName = problems[i].name, problemTitle = problems[i].title;
                problemToId[problemName] = problems[i].id;
                problemToId[problemTitle] = problems[i].id;
                // PC^2 default is 'Problem A' or something like this
                problemToId[problemTitle.replace(/^Problem /, '')] = problems[i].id;
            }
            // set up priority (larger is earlier)
            for(var i = 0; i < priority.length; ++ i) priority[i] = -i;
            for(var i = 0; i < order.length; ++ i) {
                var id = problemToId[order[i]] || parseInt(order[i]);
                priority[id] += (order.length - i) * 10000;
            }
            return priority;
        })();

        // 지정된 순서가 있다면 그 중 처음 것을, 아니면 가장 앞쪽 문제를 반환
        $pending.sort(function(x, y) {
            var xid = $(x).data('problem-id'),
                yid = $(y).data('problem-id');
            // priority가 큰 문제가 앞으로 오도록.
            return Spotboard.Award.revealPriority[yid] - Spotboard.Award.revealPriority[xid];
        });
        return $($pending[0]);
    };

    /**
     * 어워드 모드에서 한 번의 스텝을 proceed 하는 핸들러.
     * 한 팀, 한 문제의 런을 연속적으로 피딩하고 스코어보드에 반영하는 로직들.
     */
    Spotboard.Award.doProceedStep = function() {
        var contest = Spotboard.contest,
            runfeeder = Spotboard.runfeeder;

        var $df = new $.Deferred();

        // 실수방지 : 어워드 슬라이드가 떠 있을 때에는 동작 못함(esc로 꺼야함)
        if( Spotboard.Award.AwardSlide.isSlideDisplayed() )
            return $df.resolve('slide-on');

        // 슬라이드가 이미 열린 것이 있으면 off.
        Spotboard.Award.AwardSlide.hide();

        var $team = Spotboard.Award.getNextTeam();
        var teamId = $team.data('team-id');
        if(!$team) {
            // TODO event trigger
            return $df.resolve('end');    // THE END
        }

        if(Spotboard.Animation.Focus.has($team) == false) {
            Spotboard.Animation.Focus.on($team);

            // 어워드 모드에서 팀 이름을 숨기는 경우, 포커스 on과 동시에 reveal
            Spotboard.Award.revealTeamDisplayIfHidden($team, /*animation*/true);

            return $df.resolve('focus');
        }

        // 다음으로 깔 run/problem 을 선택한다.
        var $pending = Spotboard.Award.getNextPendingToShow($team);

        if(! $pending) {
            // 팀 finalize
            Spotboard.Animation.Focus.off($team);
            Spotboard.Award.finalizeTeam($team);

            // 해당 팀에 등록된 슬라이드가 있으면 슬라이드를 보여준다.
            Spotboard.Award.AwardSlide.showForTeam( contest.getTeam(teamId) );
            return $df.resolve('done');
        }

        var problemId = $pending.data('problem-id'),
            teamId = $team.data('team-id');    // TODO ㅜㅜ

        /* use blinking effect if possible */
        var use_blinking_effect = Spotboard.config['award_focus_blinking'];
        if(typeof use_blinking_effect === "function") {
            use_blinking_effect = !! use_blinking_effect(contest.getTeamStatus(teamId));
        }
        if(use_blinking_effect) {
          /* state: (none) -> (focused) -> (revealing) -> (done) */
            if(! $pending.hasClass('award-run-focus') &&
               ! $pending.hasClass('award-run-revealing')) {
                // a. (none) -> (focused)
                $pending.addClass('award-run-focus');
                return $df.resolve('run-focused')
            }
            else {
                // b. (focused) -> (revealing)
                $pending.removeClass('award-run-focus');
                $pending.addClass('award-run-revealing');

                $df.always(function() {
                  // after resolved, remove this marker class as well
                  // c. (revealing) -> (done)
                  $pending.removeClass('award-run-revealing');
                });
            }
        }

        // 등수에 따라 애니메이션 (flip/move team up) 속도를 다르게 함
        // solved 경계값을 기준으로 (푼 문제수) >= solved 인 최초의 것을 찾음
        var animInfo = $.grep(
                Spotboard.config['award_animation_speeds'] || [],
                function(elem, idx) {
                    return elem.solved <= contest.getTeamStatus(teamId).getTotalSolved();
                })[0];
        animInfo = animInfo || {};

        // TODO 함수로 처리
        Spotboard.Award.awardManagerTeamProblemSelector = {
            teamId : teamId,
            problemId : problemId
        };

        // 의존성의 방향이 영 좋지않다 ㅠㅠ TODO
        Spotboard.Manager.feedSingleRun(
            function updateAnimation(run, remainCount) {
                var animation = new Spotboard.Animation.UpdateRun(run, {
                    flipSpeed: animInfo.fastFlipSpeed || 300,
                });
                if(remainCount == 0 || run.isAccepted())
                    animation.setFlipSpeed(animInfo.slowFlipSpeed || 700);

                return animation;
            },
            function moveTeamUpAnimation(team, run) {
                var animation = new Spotboard.Animation.MoveTeamUp(team, animInfo.utuSpeedFunc);

                return animation;
            }
        )
        .pipe( function(run) {
            // run update 에니메이션이 끝난 이후 실행됨.
            // run : feedSingleRun 에서 깐 런 (deferred로 resolve된)

            // TODO : 현재 구현은 Animation.UpdateRun 에서 트랜지션이 끝나면 포커스를 꺼버리는 문제가 있다.
            // 일단 임시방편으로 포커스를 다시 잡는데 대략 구조가 좋지 않으므로 개선이 필요함;
            // 여기서 포커스 잡으면 scrollTo 도 해버리는 게 문제군 OTL
            $team.addClass('target'); // WTF FIXME

            // 후속 처리
            // 만약 맞아서 올라갔으면 포커스를 끔.
            // 여기서 보는 $pending 은 업데이트가 다 된 이후의 상태이다.
            if($pending.hasClass('solved'))    { // TODO DOM 말고 다른 방법은?
                Spotboard.Animation.Focus.off($team);
                $df.resolve('up');
            }
            else if($pending.hasClass('pending')) { // 더 깐다.
                $df.progress('pending');
                setTimeout( function() {
                    Spotboard.Award.doProceedStep()
                        .then(function() { $df.resolve('done') });
                }, 0);
            }
            else {
                $df.resolve('done');    // 더이상 깔게 없음. we are done.
            }
        });

        return $df;
    };

    Spotboard.Award.proceedOne = Spotboard.Util.withDeferredLock(
        Spotboard.Award.doProceedStep
    );


    Spotboard.Award.revealTeamDisplayIfHidden = function($team, use_animation) {
        if(! $team.find('.team-name').hasClass('award-hidden'))
            return false;

        var contest = Spotboard.contest,
            team = contest.getTeam( $team.data('team-id') );

        // TODO 여기 class 주는 부분 css와 함께 개선
        var $_target = $team.find('.team-name, .team-represents')
            .removeClass('award-hidden');

        if(use_animation) {
            $_target
                .addClass('award-revealing')
                .delay(1000, 'revealing-done').queue('revealing-done', function(next) {
                    $(this).removeClass('award-revealing');
                }).dequeue('revealing-done');
        }

        // animation !
        var $tname = $team.find('.team-name');
        var $trepr = $team.find('.team-represents');

        $trepr.text( team.getGroup() );
        $tname.text( team.getName() );
    };



    Spotboard.Award.initAwardMode = function() {
        var runfeeder = Spotboard.runfeeder;

        // award 모드일때에는 animation 사용을 강제한다.
        Spotboard.config['animation'] = true;

        /**
         * 어워드 모드에서 까야 하는 run들.
         * 현재 최초 feeding시 initial_runid(maximum run id) 이후의 모든 run들이다.
         */
        var awardFeedingRuns = [];

        // initial_runid 이후의 런들은 다 펜딩으로 피딩함
        var smallestPendingRunId = null;    // 펜딩처리된 최소의 run id
        runfeeder.strategy._popRun = runfeeder.strategy.popRun;
        runfeeder.strategy.popRun = function() {
            var runIntercepted = runfeeder.strategy._popRun.apply(this);
            if(runIntercepted) {
                // 어워드 모드에서 까기 위한 run들을 집어넣고
                awardFeedingRuns.push(runIntercepted.clone());

                // 아직 까지 않은 run들은 pending 상태로 만들어서 보여주도록 한다.
                // pending으로 표시한다.
                runIntercepted.result = '';
                if(smallestPendingRunId === null || smallestPendingRunId > runIntercepted.getId())
                    smallestPendingRunId = runIntercepted.getId();
            }
            return runIntercepted;
        };
        runfeeder.feed(1000000);    // 끝까지 다 feed

        $("#wrapper").addClass('award-mode');

        // feed 전략을 바꾸고, 모든 run을 다시 fetch한다.
        Spotboard.Award.awardManagerTeamProblemSelector = {
            // 이 오브젝트의 pid, tid에 따라 run을 깐다.
            problemId : null,
            teamId: null
        };
        runfeeder.setStrategy( new TeamProblemSeparatedQueuedRunFeedingStrategy(
            function() {    // returns {problemId, teamId}
                return Spotboard.Award.awardManagerTeamProblemSelector;
            }
        ));

        // award 모드에서 까면서 보여줄 run들을 runfeeder에 집어넣는다.
        runfeeder.fetchRunsFromArray(awardFeedingRuns);

        // TODO 이거 이렇게 의존성 있어도 되려나?_?
        // 나중에 Manager 쪽에서 설정하도록 고치자
        $(document).bind('keyup', function(e) {
            var KEY_CODES = {
                RIGHT: 39,
                ENTER: 13,
                SEMICOLON: 186,
                ESC: 27
            };
            if(e.keyCode == KEY_CODES.ENTER || e.keyCode == KEY_CODES.RIGHT || e.keyCode == KEY_CODES.SEMICOLON) {
                Spotboard.Award.proceedOne();
            }
            else if(e.keyCode == KEY_CODES.ESC) {
                Spotboard.Award.AwardSlide.hide();
            }
        });

        // 스코어보드가 다 그려진 이후에 실행될 기능들
        $(Spotboard).bind('drew', Spotboard.Award.forwardToRankBegin);
        $(Spotboard).bind('drew', Spotboard.Award.bindFinalizedTeamEventHandlers);

        // 런 & award slide 로드에 성공하면 스코어보드를 그리고 시작한다.
        $.when(Spotboard.Award.AwardSlide.fetch())
         .then(function() {
            $(Spotboard).trigger('ready');

            // award_slide.json에 있는 icon 파일 이름에 따라 css style을 추가한다.
            var added = {};
            var $style= $('<style type="text/css" id="award-medal-icon"></style>');
            $.each(Spotboard.Award.AwardSlide.data, function(idx, val) {
                var icon = val.icon;
                if (!icon || added[icon]) return;
                added[icon] = true;
                $style.append(
'.award-medalist.'+icon+' .team-name:after { background-image: url("../img/award/'+icon+'.png"); }\n'
                );
            });
            $('head').append($style);
         });
    };

    /**
     * 스코어보드가 그려진 이후에, 각 팀에 대한 event handler를 초기화 한다.
     * 예컨대 클릭 이벤트 등이 있을 수 있다.
     */
    Spotboard.Award.bindFinalizedTeamEventHandlers = function() {
        var $teamlist = $('#team-list');

        /*
         * finalized 된 '수상'팀에 한해 클릭 이벤트를 추가한다.
         * 혹시라도 finalize된 이후 슬라이드가 실수로 넘어간 경우, 이를 다시 보여줄 때 사용한다.
         */
        $teamlist.on('click', '.team.finalized.award-medalist .team-name', function(e) {
            e.preventDefault();
            var teamId = $(this).parents(".team").data('team-id');
            Spotboard.Award.AwardSlide.showForTeam(teamId);
        });
    };


    Spotboard.Award.finalizeTeam = function($team) {
        $team.addClass('finalized');

        // 수상팀인 경우 배지를 달아준다.
        var slide = Spotboard.Award.AwardSlide.getSlideData($team.data('team-id'));
        if(slide != null) {
            var icon = slide.icon;
            if(icon) {
                $team.addClass('award-medalist ' + icon);
            }
        }
    };


    /**
     * 어워드 모드에서, 시작 위치까지의 상태로 빨리감기한다.
     * @see Spotboard.Config['award_rank_begin']
     */
    Spotboard.Award.forwardToRankBegin = function() {
        var rankBegin = parseInt(Spotboard.config['award_rank_begin']);
        if(!rankBegin) return false;

        // 런을 까는 팀/순서에 따라 스코어보드의 상태가 다르기 때문에
        // 실제 award에서 하는 그대로 시뮬레이션하는 수밖에 없다.
        // (e.g. NMU 이후의 런이지만, rankBegin 밑에 있다가 맞아서 올라온 경우? TODO)
        //
        // DOM manipulation이 많아서 다소 느릴 수 있음..

        var forward_step = function() {
            var $team = Spotboard.Award.getNextTeam();
            if(! $team) return 'break';

            var teamCurrentRank = $team.index();
            if(teamCurrentRank < rankBegin)
                return 'break';

            // hidden된 팀 정보 공개.
            // 빨리감기 시뮬레이션에서는 계속 숨길 수 있다 (finalize될 때에만 공개).
//            Spotboard.Award.revealTeamDisplayIfHidden($team, /*animation*/false);

            var teamId = $team.data('team-id');
            var $pending = Spotboard.Award.getNextPendingToShow($team);
            if(!$pending) {
                Spotboard.Award.revealTeamDisplayIfHidden($team, /*animation*/false);
                Spotboard.Award.finalizeTeam($team);
                return [teamId, 'finalize']; // continue
            }

            if(console) {
                console.log('Forwarding... Rank: ' + teamCurrentRank +
                            ', Team ' + teamId + ' : Problem ' + $pending.data('problem-id'));
            }

            var problemId = $pending.data('problem-id');

            Spotboard.Award.awardManagerTeamProblemSelector = {
                teamId : teamId,
                problemId : problemId
            };

            // TODO refactor & decouple feeding and animation
            // Spotboard.Manager 로의 의존성도 제거해야 함.
            var run = null;
            var $fed_df = Spotboard.Manager.feedSingleRun(
                // TODO 중복
                function updateAnimation(run, remainCount) {
                    var animation = new Spotboard.Animation.UpdateRun(run);
                    animation.setFlipAnimationEnabled(false);
                    return animation;
                },
                function moveTeamUpAnimation(team, run) {
                    var animation = new Spotboard.Animation.MoveTeamUp(team);
                    animation.setAnimationEnabled(false);
                    return animation;
                }
                // TODO 중복 END
            );

            if($fed_df.state() == 'rejected') {
                // it means that there is no more run to feed.
                if(console) {
                    console.log("WARNING: There is no more run to feed -- something wrong?\n" +
                                "teamId = " + teamId + ", problemId = " + problemId);
                }
                return 'break';
            }
            return [teamId, problemId]; // continue
        };

        // equivalent to the following, but let DOM be rendered in-place.
        /* while(true) { if(forward_step() == 'break') break; } */
        var forward_step_fn = (function() {
            while (true) {
                var r = forward_step();
                if(r == 'break') break; /* DONE */
                if(r[1] == 'finalize') {
                    return setTimeout(forward_step_fn, 0); // doEvents()
                }
            }
        });
        forward_step_fn();
    };


    Handlebars.registerHelper('humanizeRank', function(rank) {
        if(typeof rank === 'number')
            return new Handlebars.SafeString('<span class="suffix-' + Spotboard.Util.ordinalSuffix(rank) + '">' + rank + '</span> Place');
        else
            return rank;
    });

    // 어워드 슬라이드 템플릿
    Spotboard.JST['awardslide'] = Handlebars.compile('\
<div class="award-slide">\
    <div class="award-rank">{{humanizeRank rank}}</div>\
    <div class="award-represents">{{group}}</div>\
    <div class="award-teamname">{{name}}</div>\
{{#if others}}\
    <div class="award-others">\
        <ul>\
            {{#each others}}\
            <li>\
                <span class="award-represents">{{group}}</span> &mdash;\
                <span class="award-teamname">{{name}}</span>\
                {{#if rank}}\
                    (<span class="award-rank suffix-{{ordinalSuffix rank}}">{{rank}}</span>)\
                {{/if}}\
            </li>\
            {{/each}}\
        </ul>\
    </div>\
{{/if}}\
</div>\
');

    Spotboard.Award.AwardSlide = {
        data : {},

        fetch : function(url) {
            url = url || Spotboard.config['path']['award_slide.json'];
            return $.ajax({
                url: url,
                dataType : 'json',
                timeout : Spotboard.config['fetch_timeout'] || 2000,
                success : function(data) {
                    for(var i = 0; i < data.length; ++ i) {
                        if(! data[i].id) continue;
                        Spotboard.Award.AwardSlide.data[data[i].id] = data[i];
                    }
                },
                error : function(xhr, stat, err) {
                    console.log('Unable to fetch ' + url + ' : ' + err);
                }
            });
        },

        show : function(slideData) {
            var $slide = $( Spotboard.JST['awardslide'](slideData) );

            // 기존에 존재하는 모든 slide는 제거함
            $(".award-slide").remove();
            $slide.fadeIn('slow').appendTo( $("body") );
        },

        getSlideData : function(team) {
            var teamId;
            if(typeof team === 'number' || typeof team === 'string')
                teamId = parseInt(team);
            else teamId = team.getId();

            return Spotboard.Award.AwardSlide.data[teamId] || null;
        },

        showForTeam : function(team) {
            var slideData = Spotboard.Award.AwardSlide.getSlideData(team);
            if(!slideData) return;
            Spotboard.Award.AwardSlide.show(slideData);
        },

        isSlideDisplayed : function() {
            return $(".award-slide").length > 0;
        },

        hide : function() {
            $(".award-slide").fadeOut( function() {
                $(this).remove();
            });
        }
    };

    return Spotboard.Award;
});

define('spotboard.manager',[
    'spotboard',

    'jquery',
    'contest',

    'jquery.badger',
    'spotboard.util',
    'spotboard.view',
    'spotboard.animation',
    'spotboard.notify',
    'spotboard.dashboard',
    'spotboard.award'
],
function(Spotboard, $)  {
    // TODO modularize all exports from 'contest.js'

    Spotboard.Manager = {};

    Spotboard.Manager.displayedContestTime = null;

    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
    var joinPath = function(base, path) {
        if(base.endsWith('/') && path.charAt(0) == '/')
            return base + path.substr(1);
        else return base + path;
    };

    /**
     * contest를 비동기로 로드한다.
     *
     * @returns $df deferred object
     * Spotboard.contest 를 새로운 contest context로 set한다.
    */
    Spotboard.Manager.loadContest = function() {
        var $df = new $.Deferred();

        //var path = joinPath(Spotboard.config['apiBase'], '/contest.json');
        var path = Spotboard.config['contestData'];

        var onError = function(err) {
            if(console) console.log('Unable to fetch ' + path + ' : ' + err);
            Spotboard.View.displaySystemMessage('Failed : ' + err, 'red');
            $df.reject('error');
        };

        $.ajax({
            url : path,
            dataType : 'json',
            success : function(json) {
                try {
                    var contest = Contest.createFromJson(json);
                    Spotboard.contest = contest;
                    return $df.resolve('success');
                }
                catch(e) {
                    if(console) console.log(e.stack);
                    return onError(e.toString());
                }
            },
            error: function(xhr, stat, err) {
                return onError(err);
            },
            timeout : Spotboard.config['fetch_timeout'] || 2000,
        });

        return $df.promise();
    };
    

    /**
     * run 들을 비동기로 로드한다.
     *
     * @returns $df defered object
     * Spotboard.runfeeder 를 셋한다.
     */
    Spotboard.Manager.loadRuns = function() {
        var $df = new $.Deferred();
        var path = Spotboard.config['apiBase']; 
        $.ajax({
            url : path,
            dataType : 'json',
            success: function (e) {
                if (e.data.time.NoMoreUpdate) {
                  $df.resolve("success");
                  return;
                }
                Spotboard.$runs = e.data;
                $df.resolve("success");
            },
            error : function(xhr, stat, err) {
                if(console) console.log('Unable to fetch ' + path + ' : ' + err);
                $df.reject('error');
            }
        });

        return $df.promise();
    };


    /**
     * 하나의 run을 feed해서 진행시키고 (FIFO 런이 될수도 있고, 어워드 모드에서 진행되는 런일수도 있음)
     * 스코어보드를 업데이트하도록 View를 호출한다.
     *
     * @param updateAnimationFactory 팀 업데이트 애니메이션을 생성하는 factory function.
     *  [signature] Run run, Integer remainCount -> Animation
     *
     * @param utuAnimationFactory 런이 맞은 경우 동작할 애니메이션을 생성하는 factory function.
     *  [signature] Team team, Run run -> Animation
     *
     * @return $.Deferred
     */
    Spotboard.Manager.feedSingleRun = function(updateAnimationFactory, utuAnimationFactory) {
        var contest = Spotboard.contest,
            runfeeder = Spotboard.runfeeder;

        var $df = new $.Deferred();

        var fed = runfeeder.feed(1, function(run, remainCount) {
            Spotboard.Manager.displayedContestTime = Spotboard.runfeeder.getContestTime(); // TODO 중복
            $(Spotboard.runfeeder).trigger('change');

            if(updateAnimationFactory === undefined) {
                // default animation : updateRun
                updateAnimationFactory = function(run, remainCount) {
                    return new Spotboard.Animation.UpdateRun(run, {});
                };
            }
            if(utuAnimationFactory === undefined) {
                // default animation: utu
                utuAnimationFactory = function(team, run) {
                    return new Spotboard.Animation.MoveTeamUp(team);
                };
            }

            // 애니메이션을 생성한다.
            var animation = updateAnimationFactory(run, remainCount);

            // 애니메이션에서 팀이 flip
            var fnUpdateTeamRank = function() {
                $("#team-list > .team").each( function() {
                    // TODO 여기 DOM manipulation 안하도록 고쳐야 함
                    var oldRank = $(this).find('.team-rank').text();
                    var newRank = contest.getTeamStatus( $(this).data('team-id') ).getRank();
                    if(oldRank != newRank) {
                        Spotboard.View.updateTeamRank( $(this), newRank);
                    }
                });

                if(!Spotboard.config['award_mode']) { // TODO 조건이 좀 구림..
                    // notify, dashboard 등 updated 이벤트.
                    $(Spotboard).trigger('teamUpdated', [run]);
                }
            };

            animation.addTeamFlippingProgress(fnUpdateTeamRank);

            animation.run()
                .pipe( function(runEvent) {
                    if(runEvent === 'solved') {
                        // 풀었으면 team move up;
                        var upAnimation = utuAnimationFactory(run.getTeam(), run);
                        return upAnimation.run();
                    }
                })
                .pipe( function() {
                    // 애니메이션 끝난 후 동작:
                    Spotboard.View.updateVisibility();
                    return $df.resolve(run);
                });

        });

        if(!fed) $df.reject('nofeed');    // no more run
        return $df;
    };


    /**
     * 관전자 모드에서의 런 업데이트을 한 step 진행한다.
     */
    Spotboard.Manager.proceedOne = Spotboard.Util.withDeferredLock(
        Spotboard.Manager.feedSingleRun
    );

    /**
     * 현재 DOM에 그려진 스코어보드를 기준으로,
     * 각 팀의 이벤트 (:solved) 핸들러들을 초기화한다.
     */
    Spotboard.Manager.initTeamEventHandlers = function() {
        var contest = Spotboard.contest;

        // TODO
    };

    Spotboard.Manager.feedAll = function() {
        Spotboard.contest.beginRunTransaction();
        Spotboard.runfeeder.feed(10000000);    // feed all run
        Spotboard.contest.commitRunTransaction();

        Spotboard.Manager.displayedContestTime = Spotboard.runfeeder.getContestTime(); // TODO 중복
        $(Spotboard.runfeeder).trigger('change');
        Spotboard.View.refreshScoreboard();    // draw scoreboard from scratch
        Spotboard.Dashboard.drawAllRunNotification(); // draw all run notifications
    };



    Spotboard.Manager.isTeamExcluded = function(team) {
        Spotboard.Manager._isExcluded = Spotboard.Manager._isExcluded || (function() {
            var excludeTeams = Spotboard.config['exclude_teams'] || {};
            if(typeof excludeTeams === 'function')
                return excludeTeams;

            var ret = {};
            for(var i = 0; i < excludeTeams.length; ++ i) {
                ret[excludeTeams[i]] = true;
            }
            return (function(team) {
                var teamid = (typeof team === 'number') ? team : team.getId();
                return ret[teamid];
            });
        })();

        return Spotboard.Manager._isExcluded(team);
    };

    /**
     * 각종 버튼의 이벤트 핸들러들을 바인딩 시킨다.
     */
    Spotboard.Manager.initButtonEventHandlers = function() {

        $("#feed-one-icon").click( function() { Spotboard.Manager.proceedOne(); } );
        $("#feed-all-icon").click( function() { Spotboard.Manager.feedAll(); } );

        $("#notify-icon").click( function() {
            var currentState = Spotboard.Notify.toggleNotification(this);
            if(currentState) $(this).addClass('enabled');
            else $(this).removeClass('enabled');
        });

        $("#events-icon").click( function() {
            Spotboard.Dashboard.toggle(this);
        });

        $("#mute-icon").click( function() {
            Spotboard.config['sound_effects'] = true;
            $(this).css('display', 'none');
            $("#unmute-icon").css('display', 'block');
        });

        $("#unmute-icon").click( function() {
            Spotboard.config['sound_effects'] = false;
            $(this).css('display', 'none');
            $("#mute-icon").css('display', 'block');
        });

        $("#feed-auto-icon").click( function() {
            var $auto = $(this);
            if ($auto.hasClass('paused')) {
                $auto.removeClass('paused').addClass('playing');
            }
            else {
                $auto.removeClass('playing').addClass('paused');
            }
        });
        if(! Spotboard.config['auto_play'])
            $("#feed-auto-icon").removeClass('playing').addClass('paused');

        $(Spotboard.runfeeder).bind('change', function() {
            var runCount = parseInt( Spotboard.runfeeder.getRunCount() );
            $("#update-icon").badger(runCount || '');

            var contestTime = Math.max(0, Spotboard.runfeeder.getContestTime() - Spotboard.runfeeder.getLastTimeStamp());
            if(contestTime <= 0)
                $("#time-elapsed").css("color", "red").css("font-weight", "bold");
            else if(contestTime < 3600)
                $("#time-elapsed").css("color", "orange").css("font-weight", "600");
            else
                $("#time-elapsed").css("color", "black").css("font-weight", "normal");
            $("#time-elapsed").text(
                Spotboard.Util.toTimeDisplayString(contestTime)
            );
            // Running Nyan catn
            var window_width = parseInt($("html").css("width"));
            $("#nyan-gif").css("left",  (Math.min(1, (Spotboard.runfeeder.getLastTimeStamp() / Spotboard.runfeeder.getContestTime())) * (window_width - 74) - 4405) + "px");
            // NMU
            if(Spotboard.runfeeder.isNoMoreUpdate()) {
                $("#contest-title").addClass('no-more-update');
            } else {
                $("#contest-title").removeClass('no-more-update');
            }
        });

        $("#update-icon").click( function() {
            var $icon = $(this);
            if( $icon.hasClass('updating') ) return;
            $icon.addClass('updating');

            var runfeeder = Spotboard.runfeeder,
                contest = Spotboard.contest;
            var is_autodiff = Spotboard.config['auto_rundiff'];
            var path = Spotboard.config['apiBase'];
            $.ajax({
                url : path,
                dataType : 'json',
                success : function(data) {
                    var fn = runfeeder.fetchRunsFromJson;
                    if(is_autodiff) fn = runfeeder.diffAndFeedRuns;

                    fn.call(runfeeder, data.data, function filter(r) {
                        // 이미 맞은 문제는 run 피드하지 않음
                        if(contest.getTeamStatus(r.getTeam()).getProblemStatus(r.getProblem()).isAccepted())
                            return false;
                        // 제외되는 팀의 런은 피드하지 않음
                        if(Spotboard.Manager.isTeamExcluded(r.getTeam()))
                            return false;
                        return true;
                    });

                    // update timer
                    Spotboard.Manager.displayedContestTime = runfeeder.getContestTime();
                    $(runfeeder).trigger('change');
                },
                timeout : Spotboard.config['fetch_timeout'] || 2000,
                error : function(xhr, stat, err) {
                    if(console) console.log('Unable to fetch ' + path + ' : ' + err);
                },
                complete : function() {
                    setTimeout( function() { $icon.removeClass('updating'); }, 100 );
                }
            });
        });

        // pagination
        $("#page-nav #page-left").click(function() {
            if($(this).hasClass('disabled')) return;
            Spotboard.View.paginate(-1);
        });
        $("#page-nav #page-right").click(function() {
            if($(this).hasClass('disabled')) return;
            Spotboard.View.paginate(+1);
        });
    };

    /**
     * 검색 필드에 대한 이벤트 핸들러를 바인딩한다.
     */
    Spotboard.Manager.initSearchEventHandlers = function() {
        $('#search-input').on('input', function() {
            clearTimeout($(this).data('timeout'));
            $(this).data('timeout', setTimeout(function() {
                // 검색 필터 설정 (100ms 반응 딜레이)
                var query = $(this).val();
                console.log(query);
                Spotboard.View.setSearchFilter(query);
            }.bind(this), 100));
        });

        // 초기 쿼리
        if(config['search_query']) {
            $('#search-input')
                .val(config['search_query'])
                .trigger('input');
        }
    };

    Spotboard.Manager.initWebsocketEventListener = function() {
        if(typeof WebSocket === 'undefined') return;

        // websocket을 이용하여 feedServer의 이벤트 발생 여부를 감지함
        try {
            var wsPath = Spotboard.config['path']['events_ws']
                .replace('http://', 'ws://')
                .replace('https://', 'wss://');
            var ws = Spotboard.Manager._ws = new WebSocket(wsPath);
            ws.onopen = function() {
                console.log('websocket connected');
            };
            ws.onclose = function() {
                console.log('websocket closed');
            }
            ws.onmessage = function() {
                setTimeout( function() {
                    // TODO 이거 고상한 이벤트 핸들러로 좀 고쳐야 할듯.
                    $("#update-icon").trigger('click');
                }, 0);
            }
        }
        catch(e) {
            console.log('websocket connect error : ' + e.toString());
        }
    }

    Spotboard.Manager.initUpdateTimer = function() {

        // ajax 호출할 간격 (기본 10초)
        var $icon = $("#update-icon");

        function renew_timer() {
            var old_timer = $icon.data('timer');
            if(old_timer) window.clearInterval(old_timer);

            var refreshInterval = parseInt(Spotboard.config['auto_refresh_interval']) || 10000;
            var new_timer = window.setInterval( function() {
                $icon.trigger('click', ['auto']);
            }, refreshInterval);
            $icon.data('timer', new_timer);
        }

        // 하나의 클릭 이벤트 핸들러를 더 추가하여
        // timer 호출 간격을 10초 뒤로 밀어낸다.
        $icon.click(function(e, auto) {
            if(auto === 'auto') return;

            // 손으로 누를때만 실행되도록(?)
            renew_timer();
        });

        renew_timer();
    };

    // 자동 재생 (하나씩 런을 까는..)
    Spotboard.Manager.initAutoPlayTimer = function() {
        var interval = Spotboard.config['auto_play_delay'] || 1000;
        window.setInterval( function() {
            if( $("#feed-auto-icon").hasClass('playing') )
                Spotboard.Manager.proceedOne();
        }, interval);
    };


    /**
     * 최초 런 피딩
     */
    Spotboard.Manager.feedInitialRuns = function() {
        var runfeeder = new RunFeeder(Spotboard.contest, new FIFORunFeedingStrategy());
        Spotboard.runfeeder = runfeeder;

        if(!Spotboard.$runs) throw new Error('run is not loaded');
        runfeeder.fetchRunsFromJson(Spotboard.$runs, function runfilter(r) {
            // 제외되는 팀의 런은 피드하지 않음
            if(Spotboard.Manager.isTeamExcluded(r.getTeam()))
                return false;
            return true;
        });

        Spotboard.Manager.displayedContestTime = Spotboard.runfeeder.getContestTime(); // TODO 중복

        // 최초 개수만큼 피딩
        var fed = 0;
        var initial_runid = config['initial_runid'];
        var initial_time = config['initial_time'];

        var crit = function() { return true; } // feed all
        if(initial_runid !== undefined) {
            // maximum run Id
            crit = function(run) { return run.getId() <= initial_runid; };
        }
        else if(initial_time !== undefined) {
            // contest time (in minutes)
            initial_time = parseInt(initial_time) || 0;
            crit = function(run) { return run.getTime() <= initial_time };

            // override timer (see 'change' bind function)
            Spotboard.Manager.displayedContestTime = initial_time * 60;
        }

        Spotboard.contest.beginRunTransaction();
        runfeeder.feedWhile(crit);
        Spotboard.contest.commitRunTransaction();
    };

    /**
     * contest, runs가 set된 이후, 기본적인 초기화 작업들을 수행한다.
     */
    Spotboard.Manager.initContest = function() {
        if(!Spotboard.contest) return;

        var onError = function(err) {
            Spotboard.View.displaySystemMessage('Failed : ' + err, 'red');
            return false;
        };

        try {
            // 최초 런 feeding
            Spotboard.Manager.feedInitialRuns();

            // 기본 세팅
            Spotboard.View.displayContestInformation();
            Spotboard.View.initStyles();
        }
        catch(e) {
            if(console) console.log(e.stack);
            return onError(e);
        }

        $(Spotboard).bind('ready', function() {
            Spotboard.View.drawScoreboard();
            Spotboard.Dashboard.drawAllRunNotification(); // draw all run notifications
            $(Spotboard.runfeeder).trigger('change');
        });

        // 어워드 모드
        if(Spotboard.config['award_mode'] == true) {
            Spotboard.Award.initAwardMode();
        }
        // 대회 중 관전자 모드
        else {
            // 자동 업데이트 및 자동 플레이를 활성화시킴.
            Spotboard.Manager.initUpdateTimer();
            Spotboard.Manager.initAutoPlayTimer();
            Spotboard.Manager.initTeamEventHandlers();
            Spotboard.Manager.initButtonEventHandlers();
            Spotboard.Manager.initSearchEventHandlers();
            //Spotboard.Manager.initWebsocketEventListener();

            // ready contest.
            $(Spotboard).trigger('ready');
        }
    };

    return Spotboard.Manager;

});

define('app',[
    'spotboard',
    'jquery',
    'spotboard.manager'
],
function(Spotboard, $) {
    // 비동기로 데이터를 로드한 후 시작
    $.when(
        Spotboard.Manager.loadContest(),
        Spotboard.Manager.loadRuns()
    )
    .then(Spotboard.Manager.initContest);

});

